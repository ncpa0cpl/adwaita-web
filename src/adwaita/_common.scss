/***************
 * Variables   *
 ***************/

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$backdrop_transition: 200ms ease-out;
$button_transition: all 150ms $ease-out-quad;
$link_transition: color 150ms $ease-out-quad;
$focus_transition: all 200ms $ease-out-quad;
$popover_transition: all 80ms $ease-out-quad;
$page_switcher_transition: all 150ms $ease-out-quad;
$button_radius: 5px;
$menu_radius: 5px;
$menu_margin: $menu_radius; //margin around menuitems & sidebar items
$menu_padding: 12px; // inner menuitem padding
$frame_padding: 8px;
// global $menu-margin for outside menuitems // XXX define this
$window_radius: $button_radius + 3;
$popover_radius: $button_radius + 4;

/***************
 * Selections  *
 ***************/

*::selection {
  background-color: $selected_bg_color;
  color: $selected_fg_color;
}

/***************
 * Scrollbars  *
 ***************/

*::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
*::-webkit-scrollbar-track {
  background-color: transparent;
  padding: 0 5px;
}
*::-webkit-scrollbar-thumb {
  background-clip: padding-box;
  background-color: #bbb;
  border: 2px solid transparent;
  border-radius: 5px;
  margin: 0 2px;
}
*::-webkit-scrollbar-thumb:hover {
  background-color: #999;
}
*::-webkit-scrollbar-thumb:active {
  background-color: #888;
}

/* Nice scrollbars */
@mixin small_scrollbar {
  @include is_chrome {
    overflow: overlay;

    &::-webkit-scrollbar {
      width: 8px;
      height: 8px;
      z-index: 1000;
    }
    &::-webkit-scrollbar-thumb {
      background-clip: padding-box;
      border-radius: 16px;
      border: 2px solid transparent;
      background-color: rgba(0, 0, 0, 0.2);
      -webkit-transition: background-color 0.5s ease;
      transition: background-color 0.5s ease;
    }
    &::-webkit-scrollbar-thumb:hover {
      background-color: rgba(0, 0, 0, 0.3);
    }
    &::-webkit-scrollbar-thumb:active {
      background-color: rgba(0, 0, 0, 0.4);
    }
  }
}

/***************
 * Utils       *
 ***************/

.sr-only {
  @include visually_hidden;
}

.user-select-none {
  user-select: none;
}

.fill {
  width: 100%;
  height: 100%;
}
.fill-width {
  width: 100%;
}
.fill-height {
  height: 100%;
}

/***************
 * Base States *
 ***************/
.background {
  color: $fg_color;
  background-color: $bg_color;

  .window-inactive & {
    text-shadow: none;
    --icon-shadow: none;
  }
}

.background-low {
  background-color: $background_low;
}
.background-default {
  background-color: $background_default;
}
.background-medium {
  background-color: $background_medium;
}
.background-high {
  background-color: $background_high;
}

/***************
 * Layout      *
 ***************/

// vbox and hbox separators
.separator {
  border-bottom: 1px solid $lighten_borders_color;
  border-right: 1px solid $lighten_borders_color;
  min-width: 1px;
  min-height: 1px;
}

.Box {
  &.horizontal {
    display: flex;
    flex-direction: row;
    & > *:not(:last-child) {
      margin-right: 1rem;
    }
    &.compact > *:not(:last-child) {
      margin-right: 0;
    }
  }
  &.vertical {
    display: flex;
    flex-direction: column;
    & > *:not(:last-child) {
      margin-bottom: 1rem;
    }
    &.compact > *:not(:last-child) {
      margin-bottom: 0;
    }
  }
  &.inline {
    display: inline-flex;
  }
  &.align {
    align-items: center;
  }
  &.align-center {
    align-items: center;
  }
  &.align-start {
    align-items: flex-start;
  }
  &.align-end {
    align-items: flex-end;
  }
  &.justify {
    justify-content: center;
  }
  &.justify-center {
    justify-content: center;
  }
  &.justify-start {
    justify-content: flex-start;
  }
  &.justify-end {
    justify-content: flex-end;
  }
  &.space-around {
    justify-content: space-around;
  }
  &.space-between {
    justify-content: space-between;
  }

  &.fill {
    display: inline-flex;
    width: 100%;
    height: 100%;
  }
  &.fill-width {
    display: inline-flex;
    width: 100%;
  }
  &.fill-height {
    display: inline-flex;
    height: 100%;
  }

  &.padded {
    padding: 1em;
  }

  &.expand-children > * {
    flex: 1;
  }

  &.border {
    border: 1px solid $borders_color;
  }
}
.Box__fill {
  flex: 1;
}
.Box__fill.expand-children > * {
  width: 100%;
  height: 100%;
}

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &.selected {
    &:focus,
    & {
      @extend %selected_items;

      border-radius: 3px;
    }
  }
}

.IconView {
  @extend .view;

  @include focus-ring();

  &.dnd-active {
    box-shadow: none;
  }

  > dndtarget.dnd-active {
    border-style: solid;
    border-width: 1px;
    border-color: $selected_borders_color;
  }
}

.Flowbox {
  > .SelectionArea {
    @extend .SelectionArea;
  }

  > .Flowbox__child {
    padding: 3px;
    transition: $focus_transition;

    @include focus-ring();

    &.selected {
      outline-color: $alt_focus_border_color;

      @extend %selected_items;
    }
  }
}

.Grid {
  > .SelectionArea {
    @extend .SelectionArea;
  }

  > .Grid__child {
    padding: 3px;
    transition: $focus_transition;

    @include focus-ring();

    &.selected {
      outline-color: $alt_focus_border_color;

      @extend %selected_items;
    }

    .Grid__box {
      //cells
      border-spacing: 8px; //.Label separation
      margin: 12px;
    }
  }
}

.SelectionArea {
  border: 1px solid $dimmed_selected_bg_color;
  background-color: $dimmed_transparent_selected_bg_color;
}

/*********
 * Links *
 *********/

%link,
.link {
  color: $link_color;
  text-decoration: underline;
  cursor: pointer;
  transition: $link_transition;
  border-radius: $button_radius;

  @include focus-ring($method: "after");

  &:not(:disabled):not(.disabled) {
    &:visited {
      color: $link_visited_color;

      *.selected & {
        color: $link_selected_visited_color;
      }
    }

    &:hover {
      color: $link_hover_color;

      *.selected & {
        color: $link_selected_hover_color;
      }
    }

    &:active {
      color: $link_color;

      *.selected & {
        color: $link_active_selected_color;
      }
    }
  }

  &:disabled {
    color: $link_disabled_color;
  }

  @at-root %link_selected,
    &.selected,
    *.selected & {
    color: $link_selected_color;
  }
}

/***********
 * Heading *
 **********/

.Heading {
  position: relative;
  &:hover {
    .Heading__anchor {
      opacity: 0.5;
    }
  }
}
.Heading__anchor {
  position: absolute;
  top: 0;
  left: 0;
  transform: translateX(-100%);
  height: 100%;
  line-height: 100%;
  padding-right: 4px;
  opacity: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  color: $fg_color !important;
  text-decoration: none !important;
}

/*****************
 * Labels & Text *
 ****************/

.Label {
  @include focus-ring();

  @include with_sizes {
    height: $height;
    line-height: $height;
    min-height: $height;
    font-size: $font_size;
    --icon-size: #{$icon_size};
  }

  &.separator {
    @extend .dim-label;
  }

  &::selection {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &.disabled {
    color: $insensitive_fg_color;

    .Button & {
      color: inherit;
    }

    &::selection {
      @extend %selected_items_disabled;
    }
  }

  @each $type, $color in $colors {
    &.#{$type} {
      color: $color;
      &.disabled {
        color: transparentizeVar($color, 0.5);
      }
    }
  }

  &.title {
    color: $insensitive_fg_color;
    font-weight: 700;
  }

  &.align-left {
    text-align: left;
  }
  &.align-center {
    text-align: center;
  }
  &.align-right {
    text-align: right;
  }

  &.ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  &.fill {
    width: 100%;
    height: 100%;
  }
  &.fill-width {
    width: 100%;
  }
  &.fill-height {
    height: 100%;
  }
}

.Text {
  margin: 0;
  @include with_sizes {
    // height: $height;
    // min-height: $height;
    font-size: $font_size * 1.2;
    line-height: 1.4;
    --icon-size: #{$icon_size};
  }
  &.hero {
    font-size: 24px;
    font-weight: 300;
    line-height: 1.4;
  }
  &.align-left {
    text-align: left;
  }
  &.align-center {
    text-align: center;
  }
  &.align-right {
    text-align: right;
  }

  @each $type, $color in $colors {
    &.#{$type} {
      color: $color;
    }
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

%osd,
.osd {
  color: $osd_fg_color;
  border: none;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  text-shadow: 0 1px black;
  --icon-shadow: 0 1px black;
}

/************
 * Alerts   *
 ***********/

.Alert {
  border: 1px solid $borders_color;
  border-left-width: 6px;
  border-radius: $button_radius;
  padding: 8px;

  $_colors: map-merge(
    $colors,
    (
      "default": $fg_color,
    )
  );
  $_panel_colors: (
    "default": $panel_default_color,
    "info": $panel_info_color,
    "success": $panel_success_color,
    "warning": $panel_warning_color,
    "danger": $panel_danger_color,
  );

  @each $type, $color in $_colors {
    $_current_color: $fg_color;
    $_background_color: map-get($_panel_colors, $type);

    &#{if($type == "default", "", "." + $type)} {
      color: $_current_color;
      --icon-color: #{desaturateVar($color, 30%)};
      background-color: $_background_color;
      border-color: darkenVar($_background_color, 10%);

      & a {
        color: darkenVar($_current_color, 10%);
        font-weight: bold;
      }
      & a:not(:disabled):not(.disabled):hover {
        color: darkenVar($_current_color, 5%);
      }

      .Alert__close {
        @include button("normal", $_background_color);
        &:not(:disabled):not(.disabled) {
          &.hover,
          &:hover {
            @include button("hover", $_background_color);
          }
          &.active,
          &:active {
            @include button("active", $_background_color);
          }
        }
      }
    }
  }
  // @include with_sizes {
  //   height: $height;
  //   min-height: $height;
  //   font-size: $font_size;
  //   --icon-size: #{$icon_size};
  // }
}
.Alert__icon {
  margin-top: 3px;
  --icon-size: 1.5em;
  opacity: 0.5;
}
// .Alert__content {}
.Alert__title {
  font-size: 1.2em;
  margin-bottom: 0.25rem;
}
.Alert__message {
  font-size: 1rem;
}

/****************
 * Icons        *
 ****************/

.normal-icons {
  --icon-size: 16px;
}

.large-icons {
  --icon-size: 32px;
}

.Icon {
  @include flex_center;
  display: inline-flex;

  svg {
    --icon-color: #{$base_icon_color};
    width: auto;
    height: var(--icon-size, #{map-get($icon_sizes, "medium")});
  }

  &:not(.colored) {
    svg * {
      fill: var(--icon-color, unset) !important;
    }
  }

  &.colored {
    svg * {
      fill: var(--custom-icon-color, unset) !important;
    }
  }

  *:disabled &:not(.colored):not(.increase-specificity),
  .disabled &:not(.colored):not(.increase-specificity) {
    --icon-color: rgba(0, 0, 0, 0.3);
  }

  *:disabled &.colored:not(.increase-specificity),
  .disabled &.colored:not(.increase-specificity) {
    opacity: 0.3;
  }

  svg {
    transform: scale(0.8);
  }
}

/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to {
    transform: rotate(1turn);
  }
}

.Spinner {
  opacity: 1;
  animation: spin 1s linear infinite;
  display: inline-block;
  width: var(--icon-size, 16px);
  height: var(--icon-size, 16px);

  &.disabled {
    opacity: 0.5;
  }

  &.hidden {
    opacity: 0;
  }
}

/****************
 * Text Entries *
 ****************/

@keyframes move_along_width {
  0% {
    left: var(--input-padding);
  }
  50% {
    left: calc(100% - var(--progress-indeterminate-width) - var(--input-padding, 8px));
  }
  100% {
    left: var(--input-padding);
  }
}

$_input_padding: 8px;

%entry,
.Input {
  --input-padding: #{$_input_padding};
  --progress-indeterminate-width: 50px;

  %entry_basic,
  & {
    position: relative;
    display: inline-flex;
    flex-direction: row;
    align-items: center;

    border: 1px solid;
    border-radius: $button_radius;
    border-spacing: 6px;
    transition: all 200ms $ease-out-quad;

    @include entry(normal);
    @include focus-ring($focus-state: ":focus-within", $method: "after");

    height: $height_medium;
    min-height: $height_medium;
    padding-left: var(--input-padding);
    padding-right: var(--input-padding);

    @include with_sizes {
      height: $height;
      min-height: $height;
      --input-padding: calc($height / 4);
      font-size: $font_size;
      --icon-size: #{$icon_size};
      > .Input__area {
        line-height: $height;
      }
    }

    > .Input__area {
      position: relative;
      flex: 1;
      height: 100%;
      overflow: hidden;

      > input {
        width: 100%;
        height: 100%;
        border: none;
        color: inherit;
        background: none;
        font-size: inherit;
        &:focus {
          outline: none;
        }
        &::placeholder {
          @extend .dim-label;
          user-select: none;
        }
        &::selection {
          @extend %selected_items;
        }
      }
      > .Input__children {
        position: absolute;
        pointer-events: none;
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
        @include flex-center;
        justify-content: flex-start;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
      > input:focus + .Input__children {
        opacity: 0.5;
      }
      > input:not(.empty) + .Input__children {
        opacity: 0;
      }
    }

    $inputIconMargin: 6px;

    // icons inside the entry
    .Input__left,
    .Input__right {
      @include flex_center;
    }
    .Input__left {
      margin-right: 6px;

      .Icon {
        margin-left: $inputIconMargin;
      }
    }
    .Input__right {
      margin: 0;
      margin-left: 6px;
      padding: 0;

      .Icon {
        margin-right: $inputIconMargin;
      }
    }
    .Input__left.Button,
    .Input__right.Button {
      opacity: 0.8;
      min-width: unset;
      min-height: unset;
      height: min-content;
    }

    &.flat {
      &:focus-within,
      .window-inactive &,
      &:disabled,
      .window-inactive &:disabled,
      & {
        min-height: 0;
        padding: 0 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:focus-within {
      @include entry(focus);
      > .Input__area > input::placeholder {
        opacity: 0; /* We hide placeholders on focus */
      }
    }

    &:disabled,
    &.disabled {
      @include entry(insensitive);
    }

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_color), (warning, $warning_color) {
      &.#{$e_type} {
        border-color: $e_color;

        @include focus-ring($fc: transparentizeVar($e_color, 0.5), $focus-state: ":focus-within", $method: "after");

        &:focus-within {
          @include entry(focus, $e_color);
        }

        input {
          @include colorMix(color, $e_color, $fg_color, 0.8);

          &::selection {
            background-color: $e_color;
          }
        }
      }
    }

    *:not(.InputNumber__button) .Icon {
      // entry icons colors
      --icon-color: #{$base_icon_color};
      &:hover {
        --icon-color: #{$fg_color};
      }
      &:active {
        --icon-color: #{$selected_bg_color};
      }
    }

    .dnd-active & {
      &:focus-within,
      & {
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 1px $drop_target_color;
      }
    }

    .osd & {
      @include entry(osd);

      &:focus-within {
        @include entry(osd-focus);
      }

      &:disabled {
        @include entry(osd-insensitive);
      }
    }
  }

  .Input__progress {
    position: absolute;
    display: inline-block;
    pointer-events: none;
    width: calc(100% - 2 * var(--input-padding, 8px));
    height: calc(100% - 1px);
    top: 0px;
    left: var(--input-padding);

    .Input__progress__bar {
      display: inline-block;
      width: 100%;
      height: 100%;
      border-width: 0 0 2px;
      border-color: $selected_bg_color;
      border-style: solid;
    }

    &.indeterminate {
      height: calc(100% - 1px);
      width: var(--progress-indeterminate-width);
      animation: move_along_width 2.5s infinite;
    }
  }

  // linked entries
  .linked:not(.vertical) > & {
    @include linked;
  }

  // .dnd-active .linked:not(.vertical) + &,
  // .dnd-active .linked:not(.vertical) + button,
  // .dnd-active .linked:not(.vertical) + menubutton > button,
  // .dnd-active .linked:not(.vertical) + .Dropdown > button,
  // .dnd-active .linked:not(.vertical) + colorbutton > button,
  // .dnd-active .linked:not(.vertical) + fontbutton > button,
  // .dnd-active .linked:not(.vertical) + filechooserbutton > button,
  // .dnd-active .linked:not(.vertical) + filechooserbutton > combobox > box > button.combo,
  // .dnd-active .linked:not(.vertical) + appchooserbutton > combobox > box > button.combo,
  // .dnd-active .linked:not(.vertical) + combobox > box > button.combo {
  //   border-left-color: $drop_target_color;
  // }

  // Vertically linked entries
  // FIXME: take care of "colored" entries
  .linked.vertical > & {
    @include linked_vertical;

    // brighter border between linked entries
    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      @include colorMix(border-top-color, $borders_color, $base_color, 0.3);
    }

    // brighter border between linked insensitive entries
    &:disabled + %entry:disabled,
    &:disabled + entry:disabled {
      @include colorMix(border-top-color, $borders_color, $base_color, 0.3);
    }

    + %entry.dnd-active:not(:only-child),
    + entry.dnd-active:not(:only-child) {
      border-top-color: $drop_target_color;
    }

    &.dnd-active:not(:only-child) {
      + %entry,
      + entry,
      + .Input,
      + .Button,
      + menubutton > .Button,
      + .Dropdown > .Button,
      + colorbutton > .Button,
      + fontbutton > .Button,
      + filechooserbutton > .Button,
      + filechooserbutton > combobox > box > .Button.combo,
      + appchooserbutton > combobox > box > .Button.combo,
      + combobox > box > .Button.combo {
        border-top-color: $drop_target_color;
      }
    }
  }
}

// TODO this?
.InputGroup {
  display: flex;
  flex-direction: row;
}

// TODO validate this
.table .Input {
  &:focus-within {
    &:dir(rtl),
    &:dir(ltr) {
      // specificity bump hack
      background-color: $base_color;
      transition-property: color, background;
    }
  }

  &.flat,
  & {
    border-radius: 0;
    background-image: none;
    background-color: $base_color;

    &:focus-within {
      border-color: $selected_bg_color;
    }
  }
}

// textarea component
.TextArea {
  display: inline-block;
  padding: 0;
  height: min-content !important;
  width: min-content !important;

  > textarea {
    border: none;
    background: transparent;
    padding: 0 0.5em;
    line-height: 1.5em;
    &:focus {
      outline: none;
    }
  }

  .Input__area {
    color: inherit;
  }
}

/*******************
 * Editable Labels *
 *******************/
// TODO validate this
editablelabel > stack > text {
  @include entry(normal);
}

/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
$_dot_color: $selected_bg_color;
@keyframes needs_attention {
  from {
    background-image: radial-gradient(farthest-side, $_dot_color 0%, transparentizeVar($_dot_color, 1) 0%);
  }
  to {
    background-image: radial-gradient(farthest-side, $_dot_color 95%, transparentizeVar($_dot_color, 1));
  }
}

%button,
.Button {
  @at-root %button_basic,
    & {
    position: relative;
    display: inline-flex;
    justify-content: center;
    align-items: center;

    border: 1px solid;
    border-radius: $button_radius;
    transition: $button_transition;

    height: $height_medium;
    min-height: $height_medium;
    min-width: 16px;
    padding: 4px 9px;
    @include with_sizes {
      height: $height;
      min-height: $height;
      min-width: $height;
      font-size: $font_size;
      --icon-size: #{$icon_size};
    }

    user-select: none;
    &,
    & > .Label {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    @include button(normal);
    @include focus-ring($method: "after");

    &:not(:disabled):not(.disabled) {
      &.hover,
      &:hover {
        @include button(hover);
        -gtk-icon-filter: brightness(1.2);
      }

      &.active,
      &:active,
      &:checked {
        @include button(active);

        transition-duration: 50ms;
      }
    }

    .window-inactive & {
      &.flat,
      & {
        @include button(backdrop);

        transition: $backdrop_transition;
        -gtk-icon-filter: none;

        &:active,
        &:checked {
          @include button(backdrop-active);
        }

        &:disabled {
          @include button(backdrop-insensitive);

          &:active,
          &:checked {
            @include button(backdrop-insensitive-active);
          }
        }
      }
    }

    &:disabled,
    &.disabled {
      @include button(insensitive);

      &.active,
      &:active,
      &:checked {
        @include button(insensitive-active);
      }
    }

    @at-root %button_basic_flat,
      &.flat {
      @include button(undecorated);
      // to avoid adjacent buttons borders clashing when transitioning, the transition on the normal state is set
      // to none, while it's added back in the hover state, so the button decoration will fade in on hover, but
      // it won't fade out when the pointer leave the button allocation area. To make the transition more evident
      // in this case the duration is increased.
      transition: none;

      &:not(:disabled):not(.disabled) {
        &.hover,
        &:hover {
          @include button(undecorated-hover);
          transition: $button_transition;
          transition-duration: 500ms;
        }
        &:active,
        &:checked {
          @include button(undecorated-active);
          transition: $button_transition;
        }
      }
      &:disabled,
      &.disabled {
        color: $muted_color;
      }
      &:backdrop,
      &:disabled,
      &:backdrop:disabled {
        @include button(undecorated);
      }
    }

    &.link {
      @include button(undecorated);

      color: $link_color;
      border-width: 0;

      &:not(:disabled):not(.disabled) {
        &,
        &:hover,
        &:active,
        &:checked {
          @include button(undecorated);
          color: $link_color;
          text-shadow: none;
        }
      }

      &:disabled,
      &.disabled {
        color: rgba($link_color, 0.6);
        cursor: default;
      }
    }

    &.image-button {
      padding-left: 5px;
      padding-right: 5px;
    }

    &.text-button {
      padding-left: 16px;
      padding-right: 16px;

      & > .Button__icon {
        margin-right: 0.5em;
      }
    }

    &.text-button.image-button {
      padding-left: 8px;
      padding-right: 8px;

      .Label {
        padding-left: 8px;
        padding-right: 8px;
      }
    }

    @at-root %button_basic_drop_active,
      &.dnd-active {
      color: $drop_target_color;
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 1px $drop_target_color;
    }
  }

  @at-root %button_selected,
    & {
    row.selected & {
      border-color: $selected_borders_color;

      .adwaita-dark-theme & {
        border-color: unset;
      }
    }

    @at-root %button_selected_flat,
      &.flat {
      row.selected & {
        &:not(:active):not(:checked):not(:hover):not(disabled) {
          color: $selected_fg_color;
          border-color: transparent;

          &:backdrop {
            color: $backdrop_base_color;
            .adwaita-dark-theme & {
              color: $backdrop_fg_color;
            }
          }
        }
      }
    }
  }

  // big standalone buttons like in Documents pager
  &.osd {
    min-width: 26px;
    min-height: 32px;

    &.image-button {
      min-width: 30px;
      &:only-child {
        margin: 4px;
        border-radius: 50%; // completely round when it is a single button
        box-shadow: 0 1px 2px transparentizeVar(black, 0.8); // drop shadow for the only child
      }
    }

    color: $osd_fg_color;
    border-radius: 5px;

    @include button(osd);

    border: none;
    box-shadow: none;

    &:hover {
      @include button(osd-hover);

      border: none;
      box-shadow: none;
    }

    &:active,
    &:checked {
      @include button(osd-active);

      border: none;
      box-shadow: none;
    }
  }

  //overlay / OSD style
  @at-root %osd_button,
    .osd & {
    @include button(osd);

    &:hover {
      @include button(osd-hover);
    }

    &:active,
    &:checked {
      &:backdrop,
      & {
        @include button(osd-active);
      }
    }

    &:disabled {
      &:backdrop,
      & {
        @include button(osd-insensitive);
      }
    }

    &.flat {
      @include button(undecorated);

      box-shadow: none; // FIXME respect no edge on the button mixin
      text-shadow: 0 1px black;
      --icon-shadow: 0 1px black;

      &:hover {
        @include button(osd-hover);
      }

      &:disabled {
        @include button(osd-insensitive);
        background-image: none;
        border-color: transparent;
        box-shadow: none;
      }

      &:active,
      &:checked {
        @include button(osd-active);
      }
    }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, $selected_bg_color), (destructive-action, $destructive_color) {
    &.#{$b_type} {
      @include button(normal, $b_color, white);
      @include focus-ring($fc: $alt_focus_border_color);

      &.flat {
        @include button(undecorated);

        color: $b_color; //FIXME: does it work on the dark variant?
      }

      &:not(:disabled):not(.disabled) {
        &.hover,
        &:hover {
          @include button(hover, $b_color, white);
        }

        &.active,
        &:active,
        &:checked {
          @include button(active, $b_color, white);
        }
      }

      &.flat {
        &:disabled {
          @include button(undecorated);

          color: transparentizeVar($b_color, 0.2);
        }
      }

      &:disabled {
        @include button(insensitive);

        &:active,
        &:checked {
          @include button(insensitive-active, $b_color, white);
        }
      }

      .osd & {
        @include button(osd, $b_color);

        &:hover {
          @include button(osd-hover, $b_color);
        }

        &:active,
        &:checked {
          &:backdrop,
          & {
            @include button(osd-active, $b_color);
          }
        }

        &:disabled {
          &:backdrop,
          & {
            @include button(osd-insensitive, $b_color);
          }
        }
      }
    }
  }

  .StackSwitcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a .Label needs just lateral padding while an icon needs vertical
    // padding added too.

    > .Label {
      padding: 0 6px;
      margin: 0 -6px;
    }

    > .Image {
      padding: 3px 6px;
      margin: -3px -6px;
    }

    &.needs-attention {
      > .Label,
      > .Image {
        @extend %needs_attention;
      }
    }
  }

  .linked:not(.vertical) > & {
    @include linked;
  }

  .linked.vertical > & {
    @include linked_vertical;
  }

  &.circular {
    // force circular button shape
    min-width: 32px;
    min-height: 32px;
    padding: 0;
    border-radius: 9999px;

    .Label {
      padding: 0;
    }
  }
}

%needs_attention {
  // the dot is drawn by using two radial gradient, the first one is the actual dot, the other
  // simulates the shadow labels and icons normally have in buttons.
  animation: needs_attention 150ms ease-in;

  background-image: radial-gradient(farthest-side, $_dot_color 96%, transparentizeVar($_dot_color, 1));
  background-size: 5px 5px, 5px 5px;
  background-repeat: no-repeat;
  background-position: right 3px, right 4px;

  .adwaita-dark-theme & {
    background-position: right 3px, right 2px;
  }

  &:backdrop {
    background-size: 6px 6px, 0 0;
  }

  &:dir(rtl) {
    background-position: left 3px, left 4px;

    .adwaita-dark-theme & {
      background-position: left 3px, left 2px;
    }
  }
}

// TODO validate this
.linked:not(.vertical) > menubutton,
.linked:not(.vertical) > .Dropdown,
.linked:not(.vertical) > colorbutton,
.linked:not(.vertical) > fontbutton,
.linked:not(.vertical) > filechooserbutton {
  &:dir(ltr) {
    &:not(:first-child) > button {
      @include linked_not_left;
    }
    &:not(:last-child) > button {
      @include linked_not_right;
    }
  }

  &:dir(rtl) {
    &:not(:first-child) > button {
      @include linked_not_right;
    }
    &:not(:last-child) > button {
      @include linked_not_left;
    }
  }
}

// TODO validate this
.linked.vertical > menubutton,
.linked.vertical > .Dropdown,
.linked.vertical > colorbutton,
.linked.vertical > fontbutton,
.linked.vertical > filechooserbutton {
  &:not(:first-child) > button {
    @include linked_not_top;
  }
  &:not(:last-child) > button {
    @include linked_not_bottom;
  }
}

// TODO validate this
/* menu buttons */
.ModelItem,
.ModelButton {
  min-height: 26px;
  padding-left: 5px;
  padding-right: 5px;
}
.ModelButton {
  @include button("undecorated");

  // border-radius: $button_radius;
  border: none;
  border-radius: 0;
  text-align: left;

  &.focus,
  &:focus,
  &.hover,
  &:hover {
    outline: none;
    background-color: $menu_selected_color;
    // @include button(undecorated-hover);
  }

  &.active,
  &:active {
    @include button(undecorated-active);
  }

  &.disabled,
  &:disabled {
    color: $insensitive_fg_color;
  }

  &.selected {
    @extend %selected_items;
  }
}

/* oldstyle toolbar buttons */

.Toolbar button {
  margin: 1px;
  @include button("undecorated");

  &:hover {
    @include button("hover");
  }
  &:active {
    @include button("active");
  }
  &:disabled {
    @include button("insensitive");
  }
  &:backdrop {
    @include button("backdrop");
  }
  &:backdrop:disabled {
    @include button("backdrop-insensitive");
  }
}

// TODO validate this
button.color {
  padding: 4px;

  > colorswatch:only-child {
    &,
    > overlay {
      border-radius: 0;
    }

    box-shadow: 0 1px $shadow_color;

    .osd & {
      box-shadow: none;
    }

    .adwaita-dark-theme & {
      box-shadow: unset;

      .osd & {
        box-shadow: unset;
      }
    }
  }

  .osd &,
  & {
    &:disabled,
    &:active,
    &:checked {
      colorswatch:only-child {
        box-shadow: none;
        .adwaita-dark-theme & {
          box-shadow: unset;
        }
      }
    }
  }
}

/* list buttons */
/* tone down as per new designs, see issue #1473 */
%list_button,
.list > .Row button.image-button:not(.flat) {
  @include button("undecorated");
  border: 1px solid transparentizeVar($borders_color, 0.5);
  &:hover {
    @include button(hover);
  }
  &:active,
  &:checked {
    @include button(active);
  }
}

/*****************
 * GtkSpinButton *
 *****************/

input[type="number"] {
  -moz-appearance: textfield;
}
input::-webkit-inner-spin-button,
input::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.InputNumber {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;

    padding: 0;
    border-spacing: 0;

    width: 100px;
    @include with_sizes {
      width: $height * 3;

      > .Input__area > input,
      > button.InputNumber__button.up:not(.flat),
      > button.InputNumber__button.down:not(.flat) {
        width: $height - 2px;
      }
    }

    %spinbutton_horz_entry {
      min-width: 28px;
      // reset all the other props since the spinbutton node is styled here
      margin: 0;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0;
      box-shadow: none;
      padding: 6px;

      .window-inactive &.disabled,
      .window-inactive &:disabled {
        background-color: transparent;
      }
    }

    > .Input__area > input {
      @extend %spinbutton_horz_entry;
    }

    /* :not here just to bump specificity above that of the list button styling */
    > button.InputNumber__button.up:not(.flat),
    > button.InputNumber__button.down:not(.flat) {
      @include colorMix(color, $fg_color, $base_color, 0.9);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100%;
      margin: 0;
      padding-bottom: 0;
      padding-top: 0;
      background-color: transparent;
      border-width: 0.5px;
      border-style: none none none solid;
      border-color: transparentizeVar($borders_color, 0.7);
      border-radius: 0;
      box-shadow: none;
      transition: $button_transition;

      &:dir(rtl) {
        border-style: none solid none none;
      }

      &:not(:disabled) {
        &:focus {
          outline: none;
        }
        &:hover {
          color: $fg_color;
          background-color: rgba(black, 0.03);
          box-shadow: 0 -1px darkenVar($bg_color, 5%);
        }
        &:active {
          background-color: rgba(black, 0.1);
          box-shadow: inset 0 2px 2px 0px rgba(black, 0.08);
        }
      }
      &:disabled {
        color: transparentizeVar($insensitive_fg_color, 0.7);
        background-color: transparent;
      }

      &:dir(ltr):last-child {
        border-radius: 0 $button_radius $button_radius 0;
      }
      &:dir(rtl):first-child {
        border-radius: $button_radius 0 0 $button_radius;
      }
    }
  }

  // OSD horizontal
  // TODO validate this
  .osd &:not(.vertical) {
    > .Input__area > input {
      @extend %spinbutton_horz_entry;
    }

    > button.InputNumber__button.up:not(.flat),
    > button.InputNumber__button.down:not(.flat) {
      @include button(undecorated);

      color: $osd_fg_color;
      border-style: none none none solid;
      border-color: transparentizeVar($osd_borders_color, 0.3);
      border-radius: 0;
      box-shadow: none;
      --icon-shadow: 0 1px black;
      transition: $button_transition;

      &:dir(rtl) {
        border-style: none solid none none;
      }

      &:hover {
        @include button(undecorated);

        color: $osd_fg_color;
        border-color: transparentizeVar($osd_borders_color, 0.5);
        background-color: darkenVar($osd_bg_color, 10%);
        --icon-shadow: 0 1px black;
        box-shadow: none;
      }

      &:disabled {
        @include button(undecorated);

        color: $osd_insensitive_fg_color;
        border-color: transparentizeVar($osd_borders_color, 0.5);
        --icon-shadow: none;
        box-shadow: none;
      }

      &:dir(ltr):last-child {
        border-radius: 0 $button_radius $button_radius 0;
      }

      &:dir(rtl):first-child {
        border-radius: $button_radius 0 0 $button_radius;
      }
    }
  }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    // &:disabled { color: $insensitive_fg_color; }

    display: inline-flex;
    flex-direction: column;
    min-width: 40px;
    width: 40px;

    @include with_sizes {
      width: round(ratio_to_medium(40px, $size));

      > .Input__area > input,
      > button.InputNumber__button.up:not(.flat),
      > button.InputNumber__button.down:not(.flat) {
        min-height: $height;
        // min-width: $height;
      }
    }

    &.dnd-active {
      border-color: transparent;
      box-shadow: none;
    }

    > .Input__area {
      order: 2;
      @include focus-ring($focus-state: ":focus-within", $method: "after");
    }

    > .Input__area > input {
      @extend %entry;

      width: 100%;
      padding: 0;
      border-radius: 0;

      text-align: center;

      &::selection {
        @extend %selected_items;
      }
      > block-cursor {
        @include entry(block_cursor);
      }
    }

    > button {
      width: 100%;
      padding: 0;

      &.up {
        order: 1;
        border-bottom-style: none;
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
      }
      &.down {
        order: 3;
        border-top-style: none;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }
  }

  // OSD vertical
  // TODO validate this
  .osd &.vertical > button:first-child {
    @include button(osd);

    &:hover {
      @include button(osd-hover);
    }

    &:active {
      @include button(osd-active);
    }

    &:disabled {
      @include button(osd-insensitive);
    }
  }

  // Misc
  // TODO validate this
  .TreeView &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    > text {
      min-height: 0;
      padding: 1px 2px;
    }
  }

  font-feature-settings: "tnum";
  > input {
    font-feature-settings: "tnum";
  }
}

/**************
 * ComboBoxes *
 **************/

.Dropdown {
  display: flex;
  flex-direction: row;
  min-width: 120px;

  &.Button {
    > .Label {
      flex: 1;
      text-align: left;
    }
    > .Icon {
      flex: 0;
    }
  }
  &.open {
    color: $popover_fg;
    background-color: $popover_bg;
    &.popover-bottom {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
      border-bottom-color: transparent;
    }
    &.popover-top {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
      border-top-color: transparent;
    }

    &.Button.active {
      @include button("hover");
      border-color: $popover_border;
    }
  }

  // TODO dnd behavior
  /* &.dnd-active { // FIXME: untested
   *   box-shadow: none;
   *   button.combo { @extend %button_basic_drop_active; }
   * } */
}

.Dropdown__menu.Popover {
  &.bottom .Popover__container {
    padding-top: 0;
    border-top: none;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }
  &.top .Popover__container {
    padding-top: 0;
    border-bottom: none;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  .Popover__container .Dropdown__item {
    // align menu labels with the button .Label
    padding-left: 9px;
    padding-right: 9px;
    padding: 0 $menu_padding;
  }
  .Popover__container .ModelButton {
    &.selected {
      font-weight: 700;
      outline-color: $alt_focus_border_color;
      color: $text-color;
      background-color: $menu_selected_color;
    }
  }

  // drodowns with searchboxes on top
  .dropdown-searchbar {
    padding: 6px;
    border-bottom: 1px solid $borders_color;
  }
}

/************
 * Toolbars *
 ************/
%toolbar {
  padding: 4px;
  border-spacing: 4px;
  background-color: $bg_color;
}

.Toolbar {
  @extend %toolbar;

  &.horizontal {
    display: flex;
    flex-direction: row;
  }
  &.vertical {
    display: flex;
    flex-direction: column;
    width: 38px;
  }

  // on OSD
  .osd & {
    background-color: transparent;
  }

  // stand-alone OSD toolbars
  &.osd {
    padding: 13px;
    border: none;
    border-radius: 5px;
    background-color: $osd_bg_color;

    &.left,
    &.right,
    &.top,
    &.bottom {
      border-radius: 0;
    } // positional classes for `attached` osd toolbars
  }

  // toolbar separators
  &.horizontal > .separator {
    display: inline-block;
    min-height: 28px;
    margin: 0 3px;
  }
  &.vertical > .separator {
    margin: 3px 1px;
  }
}

/**************
 * GtkInfoBar *
 **************/

.InfoBar {
  display: block;
  overflow: hidden;

  transition: $button_transition;

  // FIXME: height is hardcoded otherwise the transition
  // doesnt work :/ We should find a better way to do this
  height: 45px;
  &.close {
    height: 0;
  }

  > .Box {
    padding: 8px;
    border-spacing: 12px;
  }

  $_bar_colors: (
    (info, $panel_info_color),
    (success, $panel_success_color),
    (warning, $panel_warning_color),
    (danger, $panel_danger_color)
  );

  @each $_type, $_color in $_bar_colors {
    &.#{$_type} {
      > .Box {
        border-bottom: 1px solid darkenVar($_color, 15%);
        background-color: $_color;
      }

      &.activatable:hover > .Box {
        background-color: lightenVar($_color, 5%);
      }

      > .Box > .Button {
        @include button("normal", $_color);
        &.hover,
        &:hover {
          @include button("hover", $_color);
        }
        &.active,
        &:active {
          @include button("active", $_color);
        }
      }
    }
  }
}

/****************
 * GtkSearchBar *
 ****************/

%darkbar {
  @include colorMix(background-color, $bg_color, $borders_color, 0.7);
  border-style: solid;
  border-color: $borders_color;

  .window-inactive & {
    border-color: $backdrop_borders_color;
    background-color: $backdrop_dark_fill;
    box-shadow: none;
    transition: $backdrop_transition;
  }
}

// Search bar
// TODO validate this
.SearchBar {
  padding: 6px;
  border-spacing: 6px;
  @extend %toolbar;
  @extend %darkbar;
  border-width: 0 0 1px;
}

/*****************
 * Title buttons *
 *****************/

// TODO validate this
.control-buttons {
  border-spacing: 6px;

  &:not(.empty) {
    &.start:dir(ltr),
    &.end:dir(rtl) {
      margin-right: 7px;
    }

    &.start:dir(rtl),
    &.end:dir(ltr) {
      margin-left: 7px;
    }
  }

  button {
    @extend %button_basic;
    @extend %button_basic_flat;

    border-radius: 9999px;
    padding: 6px;
    margin: 0 2px;
    min-width: 0;
    min-height: 0;
    &:not(:disabled):not(.disabled) {
      &:hover {
        //special case hover colors inside a .HeaderBar
        @include button(hover, $c: darkenVar($headerbar_bg_color, 10%));
      }
      &:active,
      &:checked {
        @include button(undecorated-active, $c: darkenVar($headerbar_bg_color, 10%));
      }
    }
  }
}

/***************
 * Header bars *
 ***************/
%titlebar,
.HeaderBar {
  padding: 0 6px;
  min-height: 46px;
  border-width: 1px;
  border-style: solid;
  border-color: $alt_borders_color;
  border-top-left-radius: $window_radius;
  border-top-right-radius: $window_radius;

  @include headerbar_fill($headerbar_bg_color);

  .window-inactive & {
    border-color: $backdrop_borders_color;
    background-color: $bg_color;
    background-image: none;
    box-shadow: inset 0 1px $top_hilight;

    transition: $backdrop_transition;
  }

  &.titlebar {
    @include headerbar_fill($headerbar_bg_color);
    background: none;
    background-color: darkenVar($headerbar_bg_color, 5%);
    box-shadow: none;
  }

  // FIXME: this is a hack to make the inner box fill the bar
  > .Box {
    min-height: 46px;
  }

  .title {
    padding-left: 12px;
    padding-right: 12px;
    font-weight: bold;
  }
  .title:not(:only-child) {
    margin-bottom: 0.15em;
  }
  .subtitle {
    font-size: smaller;
    padding-left: 12px;
    padding-right: 12px;

    @extend .dim-label;
  }

  .Button:not(:disabled):not(.disabled).active {
    border-color: darkenVar($borders_color, 5%);
    border-top-color: darkenVar($borders_color, 10%);
  }

  // TODO remove this?
  // add vertical margins to common widget on the .HeaderBar to avoid them spanning the whole height
  // entry,
  // spinbutton,
  // separator:not(.sidebar),
  // button,
  // menubutton {
  //   margin-top: 6px;
  //   margin-bottom: 6px;
  // }

  // // Reset margins for buttons inside menubutton
  // menubutton > button {
  //   margin-top: 0px;
  //   margin-bottom: 0px;
  // }

  // .Switch {
  //   margin-top: 10px;
  //   margin-bottom: 10px;
  // }

  // squared corners when the .Window is maximized, tiled, or fullscreen
  &.titlebar,
  &.no-round-corner,
  .maximized &,
  .fullscreen & {
    .window-inactive &,
    & {
      border-radius: 0;
    }
  }
}

// TODO validate this
.titlebar:not(.HeaderBar) {
  .Window.csd > & {
    // in csd we assume every titlebar is a .HeaderBar so reset anything, this is needed for split toolbars cases
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
    border-color: transparent;
    box-shadow: none;
  }

  .separator {
    background-color: $borders_color;
  } // FIXME: use darker border?

  @extend %titlebar;
}

/************
 * Pathbars *
 ************/

// TODO validate this
pathbar > button {
  &.text-button,
  &.image-button,
  & {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.text-button.image-button .Label {
    padding-left: 0;
    padding-right: 0;
  }

  &.text-button.image-button,
  & {
    .Label:last-child {
      padding-right: 8px;
    }
    .Label:first-child {
      padding-left: 8px;
    }
  }

  image {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.slider-button {
    padding-left: 0;
    padding-right: 0;
  }
}

/**************
 * Tables     *
 **************/

.table {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  max-width: 100%;
  overflow: hidden;

  border: 1px solid $treeview_borders_color;
  background-color: $background_low;

  @include focus-ring();

  // TODO validate this
  &.disabled {
    color: $insensitive_fg_color;

    &.selected {
      @include colorMix(color, $selected_fg_color, $selected_bg_color, 0.4);

      &:backdrop {
        @include colorMix(color, $backdrop_selected_fg_color, $selected_bg_color, 0.3);
      }
    }
  }

  .window-inactive & {
    border-left-color: $treeview_backdrop_borders_color;
    border-top: $treeview_backdrop_borders_color;
  }

  .table__header {
    flex: 0 0 auto;
    width: 100%;
    height: min-content;
    overflow: hidden;
    user-select: none;
  }
  .table__header__content {
    min-width: 100%;
    width: min-content;
    height: min-content;
    overflow-x: scroll;
    overflow-y: hidden;
    // box-sizing: content-box;
  }
  .table__body {
    flex: 1;
    overflow-y: hidden;
    overflow-x: hidden;
  }
  .table__body > div {
    width: 100%;
    margin: 0;
  }
  .table__body > div:not(.resize-triggers) > div {
    // scrollable element
    @include small_scrollbar;
  }

  .th {
    @extend %column_header_button;

    color: $fg_color_title;
    --icon-color: #{$fg_color_title};
    background-color: $base_color;
    font-weight: bold;
    text-shadow: none;
    box-shadow: none;
    cursor: default;

    &:first-child {
      border-left: none;
    }

    &.activatable:hover {
      @extend %column_header_button;
      @include colorMix(color, $fg_color_title, $fg_color, 0.5);
      box-shadow: none;
      transition: none; //I shouldn't need this
    }

    &.activatable:active {
      @extend %column_header_button;

      color: $fg_color;
      transition: none; //I shouldn't need this
    }

    > .Label {
      flex: 1;
    }

    .table__sortIcon {
      transition: $button_transition;
    }
    .table__sortIcon:not(.descending) {
      transform: rotate(180deg);
    }
    .table__sortIcon.hidden {
      opacity: 0;
    }
    &:hover .table__sortIcon.hidden {
      opacity: 0.5;
    }

    // Filters
    .table__filter {
      padding: 0.25rem 0;
      text-align: center;
    }
    .table__filter > * {
      width: 100%;
    }
    .InputFilter {
      padding-left: 2px;
      padding-right: 2px;
    }
    .DropdownFilter .Dropdown {
      margin-right: 0.5rem;
    }
  }

  .td {
    padding: 4px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    height: 28px;
  }
  .td:not(:last-child) {
    border-right: 1px solid $treeview_borders_color;
  }

  .table__resizer {
    position: absolute;
    top: 0;
    right: 0;
    width: 10px;
    height: 100%;
    z-index: 1;
    touch-action: none;

    border-right: 4px solid transparent;
    &:hover {
      border-right: 4px solid rgba($borders_color, 0.3);
    }
    &.isResizing {
      border-right: 4px solid $selected_bg_color;
    }
  }

  // TODO validate this
  > .SelectionArea {
    @extend .SelectionArea;
  } // to avoid borders being overridden by the previously set props

  // TODO validate this
  &.separator {
    min-height: 2px;
    color: $treeview_borders_color;
  }

  // TODO validate this
  &.dnd-active {
    box-shadow: none;
  }
  > dndtarget.dnd-active {
    border-style: solid none;
    border-width: 1px;
    border-color: $selected_borders_color;

    &.after {
      border-top-style: none;
    }

    &.before {
      border-bottom-style: none;
    }
  }

  // TODO validate this
  &.expander {
    // GtkTreeView uses the larger of the expander’s min-width and min-height
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");

    &:dir(rtl) {
      -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
    }

    @include colorMix(color, $text_color, $base_color, 0.7);

    &:hover {
      color: $text_color;
    }

    &.selected {
      @include colorMix(color, $selected_fg_color, $selected_bg_color, 0.7);

      &:hover {
        color: $selected_fg_color;
      }
    }

    &:checked {
      -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }
  }

  // TODO validate this
  &.progressbar {
    // progress bar in treeviews
    color: $base_color;
    background-color: $selected_bg_color;
    background-image: image($selected_bg_color);
    box-shadow: none;

    .adwaita-dark-theme & {
      color: unset;
    }

    &.selected {
      &:focus,
      & {
        color: $selected_bg_color;

        .adwaita-dark-theme & {
          color: $base_color;
          box-shadow: inset 0 1px transparentizeVar(white, 0.95);
        }

        background-image: image($base_color);

        &:backdrop {
          color: $selected_bg_color;
          .adwaita-dark-theme & {
            color: $base_color;
          }
          background-color: $backdrop_base_color;
        }
      }
    }
  }

  // TODO validate this
  &.trough {
    // progress bar trough in treeviews
    background-color: transparentizeVar($fg_color, 0.9);

    &.selected {
      &:focus,
      & {
        background-color: transparentizeVar($selected_fg_color, 0.7);

        .adwaita-dark-theme & {
          background-color: darkenVar($selected_bg_color, 10%);
        }
      }
    }
  }

  // TODO validate this
  button.dnd,
  .table__header.button.dnd {
    // for treeview-like derive widgets
    &:active,
    &.selected,
    &:hover,
    & {
      padding: 0 6px;
      color: $base_color;
      background-image: none;
      background-color: $selected_bg_color;
      border-style: none;
      border-radius: 0;
      box-shadow: inset 0 0 0 1px $base_color;
      text-shadow: none;
      transition: none;
    }
  }
}

%column_header_button {
  padding: 0 4px;
  background-image: none;
  border-width: 1px;
  border-style: none none solid solid;
  border-color: $treeview_borders_color;
  border-radius: 0;
  text-shadow: none;

  &:disabled {
    border-color: $bg_color;
    background-image: none;
  }

  &:last-child {
    &:backdrop,
    & {
      border-right-style: none;
    }
  }
}

/********************************************************
 * Data Tables                                          *
 * treeview like tables with individual focusable cells *
 * https://gitlab.gnome.org/GNOME/gtk/-/issues/2929     *
 ********************************************************/

columnview row:not(.selected) cell editablelabel:not(.editing):focus-within {
  outline: 2px solid $focus_border_color;
}

columnview row:not(.selected) cell editablelabel.editing:focus-within {
  outline: 2px solid $selected_bg_color;
}

columnview row:not(.selected) cell editablelabel.editing text selection {
  color: $selected_fg_color;
  background-color: $selected_bg_color;
}

/***************
 * Popovers   *
 ***************/
// popover
// -> arrow
// -> popover__container
//    -> .Menu
//    -> ...

.Popover {
  --arrow-size: 10px;

  position: absolute;
  z-index: 2;
  background-color: transparent;

  &:not(.open) {
    pointer-events: none;
  }

  .Popover__wrapper {
    transition: $popover_transition;
    opacity: 0;
    transform: scale(0.95);
  }
  &.open .Popover__wrapper {
    opacity: 1;
    transform: scale(1);
  }

  .Popover__arrow {
    position: absolute;
    z-index: 2;
    width: 0;
    height: 0;
    background-color: transparent;

    &::after,
    &::before {
      content: " ";
      position: absolute;
      top: 0;
      left: 0;
      border: var(--arrow-size) solid transparent;
    }

    &.top {
      top: calc(-1 * var(--arrow-size) + 1px);
      margin-left: calc(-1 * var(--arrow-size));
      &::before {
        top: -1px;
        border-top-width: 0;
        border-bottom-color: $popover_border;
      }
      &::after {
        border-top-width: 0;
        border-bottom-color: $popover_bg;
      }
    }
    &.bottom {
      bottom: 2px;
      margin-left: calc(-1 * var(--arrow-size));
      &::before {
        top: 1px;
        border-bottom-width: 0;
        border-top-color: $popover_border;
      }
      &::after {
        border-bottom-width: 0;
        border-top-color: $popover_bg;
      }
    }
    &.left {
      left: calc(-1 * var(--arrow-size) + 1px);
      margin-top: calc(-1 * var(--arrow-size));
      &::before {
        left: -1px;
        border-left-width: 0;
        border-right-color: $popover_border;
      }
      &::after {
        border-left-width: 0;
        border-right-color: $popover_bg;
      }
    }
    &.right {
      right: 2px;
      margin-top: calc(-1 * var(--arrow-size));
      &::before {
        left: 1px;
        border-right-width: 0;
        border-left-color: $popover_border;
      }
      &::after {
        border-right-width: 0;
        border-left-color: $popover_bg;
      }
    }
  }

  .Popover__container {
    padding: 8px 0;

    color: $popover_fg;
    background-color: $popover_bg;
    background-clip: padding-box;
    border: 1px solid $popover_border;
    border-radius: $popover_radius;
    box-shadow: 0 1px 3px 2px rgba(black, 0.08);

    // TODO validate this
    > .list,
    > .view,
    > .Toolbar {
      border-style: none;
      background-color: transparent;
    }
  }
  &.right,
  &.left {
    .Popover__container {
      padding: 8px;
    }
  }
}

/**********************
 * Popover Base Menus *
 **********************/

.Popover {
  padding: 0;
  &.MenuBar__popover > .Popover__wrapper > .Popover__container {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    border-top: none;
  }
}

.Menu {
  .separator {
    margin: 6px 0;
  }

  .Box.inline-buttons {
    padding: 0 $menu_padding;

    .Button:not(:disabled):not(.disabled):not(.increase-specificity) {
      border-radius: 2px;
      transition: none;
    }
  }

  .Box.circular-buttons {
    padding: $menu_padding $menu_padding 6px;

    .Button.circular {
      @extend %list_button;

      padding: 7px;
      margin: 0;

      &:focus {
        background-color: $menu_selected_color;
      }
      &:active {
        @include button("active");
      }
    }
  }

  .Menu__item,
  .Menu__button {
    display: flex;
    flex-direction: row;
    align-items: center;
    border: none;
    user-select: none;

    min-height: 30px;
    min-width: 40px;
    width: 100%;
    padding: 0 $menu_padding;
    border-radius: 0;
    text-align: left;
  }
  .Menu__button {
    &.selected {
      color: $text-color;
      background-color: $menu_selected_color;
    }
    &.selected:active {
      //@extend %selected_items;
      //color: $selected_fg_color;
      background-color: darkenVar($bg_color, 15%); // matching buttons
    }
    &:focus {
      outline: none;
    }
  }
  .Menu__button__text {
    flex: 1;
  }
  .Menu__button__accelerator {
    color: rgba($text_color, 0.4);
    margin-left: $menu_padding;
  }

  // TODO validate this
  check,
  radio {
    @include check("menu", "transparent", $text_color);

    &:hover {
      @include check("menu-active", "transparent", $text_color);
    }
    &:active {
      @include check("menu-active", "transparent", $text_color);
    }
  }

  //only menu radios have a border
  radio {
    border-color: $borders_color;
    &:active {
      border-color: transparentizeVar($borders_color, 0.5);
    }
  }

  arrow.left,
  radio.left,
  check.left {
    margin-left: -2px;
    margin-right: 6px;
  }

  arrow.right,
  radio.right,
  check.right {
    margin-left: 6px;
    margin-right: -2px;
  }

  .title {
    padding: 4px $menu_padding; // this will fall apart with font sizing
    width: 100%;
    text-align: left;
  }

  &.icons {
    .Menu__item,
    .Menu__button,
    .title {
      position: relative;
      padding-left: $menu_padding + 20px;
    }

    .Menu__icon {
      position: absolute;
      height: 100%;
      top: 0;
      left: 8px;
      opacity: 0.6;
    }
  }

  .Menu__iconAfter.submenu {
    opacity: 0.3;
  }

  .Menu__back {
    .Menu__icon {
      opacity: 0.3;
    }
    .Menu__button__text {
      text-align: center;
      margin-left: -16px;
    }
  }
}

/***********
 * MenuBar *
 **********/

.MenuBar {
  padding: 0px;
  box-shadow: inset 0 -1px transparentizeVar(black, 0.9);
  background-color: $background_default;

  > .MenuBar__button {
    @include button("undecorated");
    color: $text_color;

    min-height: 16px;
    padding: 1px 8px;
    border-width: 0;
    border-top: 3px solid transparent;
    border-bottom: 3px solid transparent;
    user-select: none;

    &:hover,
    &.hover,
    &:active,
    &.active {
      color: $selected_bg_color;
      border-bottom: 3px solid $selected_bg_color;
    }

    &.focus,
    &:focus {
      outline: none;
      background-color: $menu_selected_color;
    }

    &.selected {
      //Seems like it :hover even with keyboard focus
      box-shadow: inset 0 -3px $selected_bg_color;
      color: $link_color;
    }

    &:disabled {
      color: $insensitive_fg_color;
      box-shadow: none;
    }
  }

  > .MenuBar__button popover.menu > .Popover__container {
    padding: $menu-margin;
  }
  //nested submenus
  > .MenuBar__button popover.menu popover.menu {
    padding: 0 0 4px 0;
  }
  > .MenuBar__button popover.menu popover.menu > .Popover__container {
    margin: 0;
    border-radius: $popover_radius; //including top
  }
}
.MenuBar__popover {
  > .Popover__container {
    padding-top: 0;
  }
}

/*************
 * Notebooks *
 *************/
.Notebook {
  $_notebook_header_bg: $background_high;
  $_notebook_hover: lightenVar($_notebook_header_bg, 5%);
  $_notebook_tab_margin: 6px;

  display: flex;
  &.top {
    flex-direction: column;
  }
  &.bottom {
    flex-direction: column-reverse;
  }
  &.left {
    flex-direction: row;
  }
  &.right {
    flex-direction: row-reverse;
  }

  border: 1px solid $borders_color;
  // border: 1px solid red;

  .Notebook__header {
    flex: 0;
    display: flex;
    border-color: $borders_color;
    border-width: 1px;
    background-color: $_notebook_header_bg;

    &,
    & > .Notebook__tabs {
      display: flex;
      align-items: center;
    }

    &.top {
      border-bottom-style: solid;
    }
    &.bottom {
      border-top-style: solid;
    }
    &.left {
      border-right-style: solid;
    }
    &.right {
      border-left-style: solid;
    }

    &.top,
    &.bottom {
      flex-direction: row;
      > .Notebook__tabs {
        flex-direction: row;
        padding-left: 4px;
        padding-right: 4px;
      }
    }

    &.left,
    &.right {
      flex-direction: column;
      > .Notebook__tabs {
        flex-direction: column;
        padding-top: 4px;
        padding-bottom: 4px;
      }
    }
  }

  /* Tabs */

  .Notebook__tabs > .Notebook__tab {
    transition: none;
    padding: 3px 12px;
    min-height: 30px;
    min-width: 30px;

    display: flex;
    justify-content: center;
    align-items: center;
    white-space: nowrap;

    color: $fg_color;
    font-weight: normal;
    cursor: default;
    user-select: none;

    // border-width: 1px;         // for reorderable .Notebook__tabs
    // border-color: transparent; //
    border: 0;

    &:focus {
      @include focus-ring();
    }
    &:hover {
      color: $fg_color;
      background-color: $_notebook_hover;
    }
    &.selected {
      color: $fg_color;
      background-color: $_notebook_hover;
    }
    &.selected:hover {
      background-color: lightenVar($_notebook_header_bg, 10%);
    }
  }
  @mixin _tab_border($pos, $x, $y) {
    &.#{$pos} .Notebook__tabs > .Notebook__tab {
      &:hover {
        box-shadow: inset $x $y darkenVar($borders_color, 5%);
      }
      &.selected {
        box-shadow: inset $x $y $selected_bg_color;
      }
    }
  }
  @include _tab_border("top", 0, -3px);
  @include _tab_border("bottom", 0, 3px);
  @include _tab_border("left", -3px, 0);
  @include _tab_border("right", 3px, 0);
  &.top,
  &.bottom {
    .Notebook__tab {
      &:not(:last-of-type) {
        margin-right: $_notebook_tab_margin;
      }
      &.reorderable {
        border-style: none solid;
      }
    }
  }
  &.left,
  &.right {
    .Notebook__tab {
      &:not(:last-of-type) {
        margin-bottom: $_notebook_tab_margin;
      }
      &.reorderable {
        border-style: solid none;
      }

      width: 100%;
      justify-content: start;
      > .Label {
        flex: 1;
      }
    }
  }

  // colors the button like the .Label, overridden otherwise
  .Notebook__tab button {
    padding: 0;
    margin: 0;
    margin-left: 6px;
    margin-right: -6px;
    margin-bottom: -2px;

    // FIXME: generalize .small-button?
    width: 16px;
    height: 16px;
    min-width: 16px;
    min-height: 16px;
    --icon-size: 16px;

    opacity: 0.3;
    transition: $button_transition !important;

    @include button("undecorated");

    &:hover {
      @include button("hover", lightenVar($_notebook_header_bg, 10%));

      opacity: 1;
      border-color: darkenVar($borders_color, 5%);
    }
  }

  /* Arrows */

  .Notebook__arrow {
    @extend %button_basic;
    @extend %button_basic_flat;

    min-height: 30px;
    min-width: 30px;
    border-radius: 0;

    &:not(:disabled):not(.disabled) {
      &:hover:not(:active) {
        background-color: rgba(white, 0.5);
        border-color: transparent;
        box-shadow: none;
      }
      &:active {
        background-color: darkenVar($_notebook_header_bg, 10%);
      }
    }

    &:disabled {
      @include button(undecorated);
    }
  }
  &.left,
  &.right {
    .Notebook__arrow {
      width: 100%;
    }
  }

  @at-root %notebook_vert_arrows {
    padding-left: 4px;
    padding-right: 4px;
  }
  &.top .Notebook__arrow {
    @extend %notebook_vert_arrows;
    border-top-style: none;
  }
  &.bottom .Notebook__arrow {
    @extend %notebook_vert_arrows;
    border-bottom-style: none;
  }
  @at-root %notebook_horz_arrows {
    padding-top: 4px;
    padding-bottom: 4px;
  }
  &.left .Notebook__arrow {
    @extend %notebook_horz_arrows;
    border-left-style: none;
  }
  &.right .Notebook__arrow {
    @extend %notebook_horz_arrows;
    border-right-style: none;
  }

  /* Action buttons */
  .Notebook__action {
    button {
      @include button("undecorated");
    }
  }

  .Notebook__content {
    flex: 1;
    background-color: $base_color;
  }
  .Notebook__content > .PageSwitcher > .PageSwitcher__page {
    overflow: auto;
    @include small_scrollbar;
  }
}

/****************
 * PageSwitcher *
 ****************/
.PageSwitcher {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;

  .PageSwitcher__page {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transition: $page_switcher_transition;
    &.padded {
      padding: $frame_padding;
    }
  }
  .PageSwitcher__page.active {
    opacity: 1;
    transform: translate3d(0, 0, 0);
  }

  /* Transition types */

  &.horizontal {
    .PageSwitcher__page:not(.active):first-child {
      transform: translate3d(-100%, 0, 0);
    }
    .PageSwitcher__page:not(.active):last-child {
      transform: translate3d(100%, 0, 0);
    }
  }
  &.vertical {
    .PageSwitcher__page:not(.active):first-child {
      transform: translate3d(0, -100%, 0);
    }
    .PageSwitcher__page:not(.active):last-child {
      transform: translate3d(0, 100%, 0);
    }
  }
  &.opacity {
    .PageSwitcher__page:not(.active):first-child {
      opacity: 0;
    }
    .PageSwitcher__page:not(.active):last-child {
      opacity: 0;
    }
  }

  /* Expansible switcher (sized to children content) */
  &.expand {
    transition: $page_switcher_transition;

    .PageSwitcher__page {
      width: max-content;
      height: max-content;
    }

    &.use-both,
    &.use-width {
      .PageSwitcher__page:not(.main) {
        width: 100%;
      }
    }

    &.use-both,
    &.use-height {
      .PageSwitcher__page:not(.main) {
        height: 100%;
      }
    }
  }
}

/************
 * Expander *
 ************/
.Expander {
  .Expander__button {
    @include button("undecorated");
    @include focus-ring($method: "after");

    transition: $button_transition;
    border-radius: $button_radius;
    display: flex;
    justify-content: center;
    align-items: center;

    padding: 0;
    margin: 0;
    border: none;
  }
  .Expander__button .Icon.arrow {
    transition: $page_switcher_transition;
  }
  &.open .Expander__button .Icon.arrow-after {
    transform: rotate(-90deg);
  }
  &.open .Expander__button .Icon.arrow-before {
    transform: rotate(90deg);
  }

  .Expander__container {
    position: relative;
    overflow: hidden;
    transition: $page_switcher_transition;
  }
  .Expander__content {
    position: absolute;
    top: 0;
    left: 0;
  }

  &.vertical {
    .Expander__content {
      width: 100%;
      height: auto;
    }
    &:not(.open) .Expander__container {
      height: 0;
    }
  }

  &.horizontal {
    .Expander__content {
      height: 100%;
      width: auto;
    }
    &:not(.open) .Expander__container {
      width: 0;
    }
  }

  &.fit-content {
    &.vertical {
      .Expander__content {
        width: max-content;
      }
    }
    &.horizontal {
      .Expander__content {
        height: max-content;
      }
    }
  }
}

/************
 * Paned    *
 ************/
.Paned {
  position: relative;
  overflow: hidden;
  border: 1px solid $borders_color;

  &.border-handle {
    border: none;
  }
  &.border-none {
    border: none;
    .Paned__handle::before {
      background-color: transparent;
    }
  }

  .Paned__wrapper {
    width: 100%;
    height: 100%;
  }
  .Paned__pane {
    flex: 0 0 auto;
    overflow: hidden;
  }
  .Paned__handle {
    flex: 0 0 1px;
    @include focus-ring($method: "after");
    position: absolute !important;
    touch-action: none;
  }

  .Paned__wrapper.horizontal {
    display: flex;
    flex-direction: row;
    > .Paned__pane {
      width: 50%;
      &:first-child {
        border-right: 1px solid $borders_color;
      }
    }
    > .Paned__handle {
      top: 0;
      left: 50%;
      height: 100%;
      cursor: ew-resize;
      padding: 0 5px;
      transform: translateX(-50%);
    }
  }
  .Paned__wrapper.vertical {
    display: flex;
    flex-direction: column;
    > .Paned__pane {
      height: 50%;
      &:first-child {
        border-bottom: 1px solid $borders_color;
      }
    }
    > .Paned__handle {
      top: 50%;
      left: 0;
      width: 100%;
      cursor: ns-resize;
      padding: 5px 0;
      transform: translateY(-50%);
    }
  }
}

/****************
 * Autocomplete *
 ****************/

.Autocomplete__popover {
  .Popover__wrapper {
    transition: $page_switcher_transition;
    opacity: 0;
    transform: none;
  }

  .Popover__container {
    padding: 4px 0 !important;
    overflow: hidden;
  }

  .List__item {
    padding-left: $_input_padding;
    padding-right: $_input_padding;
    > * {
      white-space: nowrap;
    }
  }
}

/**********
 * Switch *
 **********/
.Switch {
  --switch-size: 20px;

  display: flex;
  flex-direction: row;
  align-items: center;

  font-weight: bold;
  // font-size: smaller;

  height: $height_medium;
  $_switch_font_sizes: (
    "mini": 0px,
    "small": 8px,
    "medium": 10px,
    "large": 13px,
    "huge": 16px,
    "mega": 20px,
  );
  @include with_sizes {
    height: $height;
    min-height: $height;
    font-size: map-get($_switch_font_sizes, $size);
    --switch-size: #{round(ratio_to_medium(20px, $size))};
  }

  & input {
    @include visually_hidden;
  }

  & label {
    position: relative;
    display: inline-block;
    width: calc(2 * var(--switch-size));
    height: calc(1 * var(--switch-size));
    // similar to the .scale
    border: 1px solid $borders_color;
    border-radius: 20px;
    color: rgba($fg_color, 0.2);
    background-color: $background_high;
    text-shadow: 0 1px transparentizeVar(black, 0.9);
    transition: $focus_transition;
  }
  & input {
    @include focus-ring($target: " + label", $offset: 0, $outer: true, $method: "before");
  }
  & input:checked + label {
    color: $selected_fg_color;
    border-color: $switch_borders_color;
    background-color: $switch_bg_color;
    text-shadow: $selected_text_shadow;
  }
  & input:disabled + label {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    text-shadow: none;
  }

  & label::after {
    content: "";
    position: absolute;
    display: inline-block;
    top: 0px;
    left: 0px;
    margin: -1px -1px;
    width: calc(var(--switch-size) - 2px);
    height: calc(var(--switch-size) - 2px);
    border: 1px solid;
    border-color: $borders_color;
    border-radius: 50%;
    transition: $button_transition;

    @include button(normal, $edge: $shadow_color);
  }
  & label:hover::after {
    @include button(hover, $c: lightenVar($bg_color, 5%), $edge: $shadow_color);
    border-color: $borders_color;
  }
  & input:checked + label::after {
    border: 1px solid $switch_borders_color;
    transform: translateX(100%);
  }
  & input:disabled + label::after {
    @include button(insensitive);
  }

  & label > span {
    font-size: inherit;
    user-select: none;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    &:first-child {
      left: 3px;
    }
    &:last-child {
      right: 3px;
    }
  }

  row.selected & {
    outline-color: $alt_focus_border_color;

    box-shadow: none;
    border-color: $switch_borders_color;

    > slider {
      &:checked,
      & {
        border-color: $switch_borders_color;
      }
    }

    .adwaita-dark-theme & {
      box-shadow: initial;
      border-color: none;

      > slider {
        &:checked,
        & {
          border-color: none;
        }
      }
    }
  }
}

/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly

.Checkbox,
.Radio {
  // Layout:
  //
  // |-----label---------------|
  // |-padding-|-----text------|
  // |<element>|
  //
  // Variables:
  // | <element> |
  // |-----------| --element-size
  //    |-----|    --element-inner-size
  // |--|          --element-padding-size

  --element-size: 20px;
  --element-padding-size: calc(var(--element-size) * 0.19);
  --element-inner-size: calc(var(--element-size) - 2 * var(--element-padding-size));

  font-size: 14px;

  display: flex;
  flex-direction: row;
  align-items: center;

  height: $height_medium;
  @include with_sizes {
    height: $height;
    min-height: $height;
    font-size: $font_size;
    --icon-size: #{$icon_size};
    --element-size: #{$height * 0.8};
    > label > .label__text {
      height: 100%;
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
    }
  }

  & input {
    @include visually_hidden;
  }

  & label {
    position: relative;
    display: inline-block;
    // width:  calc(2 * var(--element-size));
    height: calc(1 * var(--element-size));
    padding-left: var(--element-size);
    padding-right: 2px;
    // similar to the .scale
    color: $fg_color;
    border-radius: $button_radius;
    text-shadow: 0 1px transparentizeVar(black, 0.9);
    user-select: none;
    transition: $focus_transition;
  }
  & input {
    @include focus-ring($target: " + label", $offset: 0, $outer: true, $method: "before");
  }
  & label > .element {
    content: "";
    position: absolute;
    display: inline-block;

    @include entry(normal);
    border: 1px solid darkenVar($borders_color, 5%);
    box-shadow: 0 1px rgba(black, 0.075);
    transition: $button_transition;

    top: calc(var(--element-padding-size));
    left: calc(var(--element-padding-size));
    width: var(--element-inner-size);
    height: var(--element-inner-size);

    &::before,
    &::after {
      content: "";
      position: absolute;
      display: inline-block;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }
  & label:hover > .element {
    @include colorMix(background-color, $base_color, $borders_color, 0.6);
  }
  & input:not(:disabled) + label:active > .element {
    @include colorMix(background-color, $base_color, $borders_color, 0.4);
    box-shadow: inset 0 1px darkenVar($borders_color, 5%);
  }
  & input:checked + label > .element,
  & input:checked:disabled + label > .element {
    color: $selected_fg_color;
    border-color: darkenVar($selected_bg_color, 15%);
    background-color: lightenVar($selected_bg_color, 5%);
    background-image: linear-gradient(to top, $selected_bg_color, lightenVar($selected_bg_color, 5%));
  }
  & input:checked:not(:disabled) + label:hover > .element {
    background-image: linear-gradient(to top, lightenVar($selected_bg_color, 5%), lightenVar($selected_bg_color, 10%));
  }
  & input:checked:not(:disabled) + label:active > .element {
    background-image: linear-gradient(to top, darkenVar($selected_bg_color, 5%), $selected_bg_color);
    box-shadow: inset 0 1px darkenVar($selected_bg_color, 10%);
  }
  & input:disabled + label {
    color: $insensitive_fg_color;
    text-shadow: none;
  }
  & input:disabled + label > .element {
    @include entry(insensitive);
    border-color: $insensitive_borders_color;
    background-color: $insensitive_bg_color;
    background-image: none;
  }

  // TODO validate this
  row.selected & {
    outline-color: $alt_focus_border_color;

    box-shadow: none;
    border-color: $switch_borders_color;

    > slider {
      &:checked,
      & {
        border-color: $switch_borders_color;
      }
    }

    .adwaita-dark-theme & {
      box-shadow: initial;
      border-color: none;

      > slider {
        &:checked,
        & {
          border-color: none;
        }
      }
    }
  }
}

.Checkbox {
  @include with_sizes {
    --element-stroke-width: #{round(ratio_to_medium(3px, $size))};
  }

  & label .element {
    border-radius: 3px;
    &::before {
      transition: $button_transition;
      transition-property: transform;
      transform: translate(3px, 0px) rotate(45deg) scale(0);
    }
  }
  & input:checked + label .element {
    &::before {
      border: var(--element-stroke-width) solid white;
      border-top-width: 0;
      border-left-width: 0;
      width: calc(var(--element-inner-size) / 6);
      height: calc(var(--element-inner-size) / 2.5);
      transform: translate(3px, 0px) rotate(45deg);
    }
  }
  & input:checked:disabled + label .element {
    &::before {
      border-color: rgba(white, 0.5);
    }
  }
  @include with_sizes {
    & input:checked + label .element {
      &::before {
        transform: translate(#{ratio_to_medium(4px, $size)}, 0px) rotate(45deg);
      }
    }
  }
}

.Radio {
  & label .element {
    border-radius: 50%;
    &::before {
      transition: $button_transition;
      transition-property: transform;
      transform: translate(-50%, -50%) scale(0);
    }
  }
  & input:checked + label .element {
    &::before {
      background-color: white;
      border-radius: 50%;
      width: calc(var(--element-inner-size) / 1.9);
      height: calc(var(--element-inner-size) / 1.9);
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      box-shadow: inset 0 1px 0 0px #e6e6e6;
    }
  }
  & input:checked:disabled + label .element {
    &::before {
      background-color: rgba(white, 0.5);
      box-shadow: none;
    }
  }
}

/************
 * GtkScale *
 ************/
$_range_bg: darkenVar($bg_color, 5%);
$_range_border: darkenVar($bg_color, 20%);

.Range {
  // sizing
  $_marks_length: 6px;
  $_marks_distance: 6px;

  cursor: pointer;
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;

  @include focus-ring($focus-state: ".focus", $method: "before");

  $_track_sizes: (
    "mini": 4px,
    "small": 4px,
    "medium": 4px,
    "large": 6px,
    "huge": 8px,
    "mega": 10px,
  );

  $_thumb_sizes: (
    "mini": 12px,
    "small": 12px,
    "medium": 16px,
    "large": 18px,
    "huge": 20px,
    "mega": 28px,
  );

  @at-root body {
    /* Also used in Progress and LevelBar */
    --range-track-width: 4px;
    --range-size: #{$height_medium};
    --range-padding: calc(var(--range-size) / 2 - var(--range-track-width));
    --range-thumb-size: #{map-get($_thumb_sizes, medium)};
  }
  border-radius: 16px;
  @include with_sizes {
    --range-track-width: #{map-get($_track_sizes, $size)};
    --range-size: #{$height};
    --range-thumb-size: #{map-get($_thumb_sizes, $size)};
    border-radius: round(ratio_to_medium(16px, $size));
  }

  padding: var(--range-padding);

  width: 100%;
  height: var(--range-size);
  &.vertical {
    width: var(--range-size);
    height: 100%;
  }
  &.marked {
    margin-bottom: 20px;
    &.vertical {
      margin-bottom: auto;
      margin-right: 20px;
    }
  }
  &.disabled {
    pointer-events: none;
    cursor: default;
  }

  @at-root %range_content,
    .Range__content {
    position: relative;
    display: inline-block;
    width: 100%;
    height: var(--range-track-width);
  }
  @at-root %range_content_vertical,
    &.vertical .Range__content {
    width: var(--range-track-width);
    height: 100%;
  }

  @at-root %range_rail,
    .Range__rail {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: var(--range-track-width);
    border-radius: var(--range-track-width);
    border: 1px solid $_range_border;
    background-color: $_range_bg;
  }
  @at-root %range_rail_vertical,
    &.vertical .Range__rail {
    height: 100%;
    width: var(--range-track-width);
  }
  @at-root %range_rail_disabled,
    &.disabled .Range__rail {
    @include button("insensitive");
  }

  @at-root %range_track,
    .Range__track {
    display: block;
    position: absolute;
    content: "";
    height: var(--range-track-width);
    border-radius: var(--range-track-width);
    border: 1px solid darkenVar($selected_bg_color, 15%);
    background-color: $selected_bg_color;
    transition: $button_transition;
  }
  @at-root %range_track_vertical,
    &.vertical .Range__track {
    width: var(--range-track-width);
  }
  &.no-track .Range__track {
    display: none;
  }
  &.disabled .Range__track {
    display: none;
  }

  .Range__thumb {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--range-thumb-size);
    height: var(--range-thumb-size);
    margin-left: calc(var(--range-thumb-size) / -2);
    margin-top: calc(var(--range-thumb-size) / -2.5);

    @include button("normal");
    border: 1px solid bg_color($borders_color, 20%);
    border-radius: 50%;

    outline: 0;
    transition: $button_transition;

    &:hover {
      @include button("hover");
      border: 1px solid bg_color($borders_color, 20%);
    }
    &:active {
      border-color: bg_color($selected_bg_color, 25%);
    }
  }
  &.disabled .Range__thumb {
    @include button("insensitive");
    border: 1px solid bg_color($borders_color, 8%);
    &:hover {
      box-shadow: none;
    }
  }
  &.vertical .Range__thumb {
    margin-top: 0;
    margin-bottom: -6px;
    margin-left: -6px;
  }

  .Range__mark {
    position: absolute;
    border-radius: 1px;
    background-color: bg_color($_range_bg, 8%);
    &.active {
      background-color: $selected_bg_color;
      // box-shadow: 0 0 0 1px rgba($selected_bg_color, 0.1);
    }
  }
  &:not(.vertical) .Range__mark {
    top: 8px;
    width: 1px;
    height: 4px;
  }
  &.vertical .Range__mark {
    left: 8px;
    width: 4px;
    height: 1px;
  }
  &.disabled .Range__mark {
    &.active {
      background-color: darkenVar($bg_color, 15%);
      box-shadow: none;
    }
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    &.horizontal {
      padding-top: 9px;
      padding-bottom: 9px;
      min-height: 16px;
    }

    &.vertical {
      padding-left: 9px;
      padding-right: 9px;
      min-width: 16px;
    }

    // to make the trough grow in fine-tune mode
    > trough > slider {
      margin: -6px;
    }

    > trough > fill,
    > trough > highlight,
    > trough {
      border-radius: 5px;
    }
  }
}

/*****************
 * Progress bars *
 *****************/

.Progress {
  position: relative;
  display: inline-flex;

  padding: 12px;
  height: 28px;
  width: 100%;

  &.vertical {
    width: 28px;
    height: 100%;
  }

  .Progress__content {
    @extend %range_content;
  }
  &.vertical .Progress__content {
    @extend %range_content_vertical;
  }

  .Progress__rail {
    @extend %range_rail;
  }
  &.vertical .Progress__rail {
    @extend %range_rail_vertical;
  }
  &.disabled .Progress__rail {
    @extend %range_rail_disabled;
  }

  .Progress__track {
    @extend %range_track;
  }
  &.vertical .Progress__track {
    @extend %range_track_vertical;
  }
  &.indeterminate:not(.vertical) .Progress__track {
    width: 25%;
    animation: progress_horizontal 2.5s infinite;
  }
  &.indeterminate.vertical .Progress__track {
    height: 25%;
    animation: progress_vertical 2.5s infinite;
  }

  &.labeled {
    padding-top: 24px;
  }
  .Progress__label {
    position: absolute;
    top: 3px;
    left: 50%;
    transform: translateX(-50%);
    color: rgba($insensitive_fg_color, 0.7);
    white-space: nowrap;
    user-select: none;
  }
}

@keyframes progress_horizontal {
  0% {
    left: 0%;
  }
  50% {
    left: calc(100% - 25%);
  }
  100% {
    left: 0%;
  }
}

@keyframes progress_vertical {
  0% {
    top: 0%;
  }
  50% {
    top: calc(100% - 25%);
  }
  100% {
    top: 0%;
  }
}

/*************
 * Level Bar *
 *************/

$levelbar_size: 9px;
$levelbar_border_radius: 3px;

.LevelBar {
  position: relative;
  display: inline-flex;

  padding: 12px;
  height: 28px;
  width: 100%;

  &.vertical {
    width: 28px;
    height: 100%;
  }

  .LevelBar__content {
    @extend %range_content;
    display: flex;
    flex-direction: row;
  }
  &.vertical .LevelBar__content {
    @extend %range_content_vertical;
    flex-direction: column;
  }

  .LevelBar__rail {
    @extend %range_rail;
    position: initial;
    border-radius: 0;
    &:first-child {
      border-top-left-radius: 1px;
      border-bottom-left-radius: 1px;
    }
    &:last-child {
      border-top-right-radius: 1px;
      border-bottom-right-radius: 1px;
    }
    &:not(:last-child) {
      margin-right: 2px;
    }

    $_bar_colors: (
      (info, $panel_info_color),
      (success, $panel_success_color),
      (warning, $panel_warning_color),
      (danger, $panel_danger_color)
    );

    @each $_type, $_color in $_bar_colors {
      &.#{$_type} {
        background-color: $_color;
        border-color: darkenVar($_color, 20%);
      }
    }
  }
  &.vertical .LevelBar__rail {
    @extend %range_rail_vertical;
  }
  &.disabled .LevelBar__rail {
    @extend %range_rail_disabled;
  }
}

/**********
 * Frames *
 **********/

.Frame {
  border: 1px solid $borders_color;
  // border-radius: $window_radius;

  &.inline {
    display: inline-block;
    width: min-content;
  }

  &.padded {
    padding: 1rem;
  }

  &.scrollable {
    overflow: auto;
  }

  &.no-border {
    border: none;
  }
}

// TODO validate this
/* scrolledwindow {
 *   // This is used when content is touch-dragged past boundaries.
 *   // draws a box on top of the content, the size changes programmatically.
 *   > overshoot {
 *     &.top {
 *       @include overshoot(top);
 *     }
 * 
 *     &.bottom {
 *       @include overshoot(bottom);
 *     }
 * 
 *     &.left {
 *       @include overshoot(left);
 *     }
 * 
 *     &.right {
 *       @include overshoot(right);
 *     }
 *   }
 * } */

/*********
 * Lists *
 *********/
listview,
list,
.List {
  display: inline-block;
  color: $text_color;
  background-color: $base_color;
  margin: 0;
  padding: 0;
  overflow: auto;

  @include small_scrollbar;

  .window-inactive & {
    color: $backdrop_text_color;
    background-color: $backdrop_base_color;
    border-color: $backdrop_borders_color;
  }

  &.horizontal .List__item.separator,
  &.separators.horizontal > .List__item:not(.separator):not(:last-child) {
    border-left: 1px solid $treeview_borders_color;
  }
  &:not(.horizontal) .List__item.separator,
  &.separators:not(.horizontal) > .List__item:not(.separator):not(:last-child) {
    border-bottom: 1px solid $treeview_borders_color;
  }

  &.border {
    border: 1px solid $borders_color;
  }
  &.border-top {
    border-top: 1px solid $borders_color;
  }
  &.border-bottom {
    border-bottom: 1px solid $borders_color;
  }
  &.border-left {
    border-left: 1px solid $borders_color;
  }
  &.border-right {
    border-right: 1px solid $borders_color;
  }
  &.border-none {
    border: none;
  }

  &.rounded {
    border-radius: 12px;
  }
}

.List__item {
  display: flex;
  flex-direction: row;
  padding: 2px;

  &,
  &:hover {
    text-decoration: none;
    color: $fg_color;
  }

  &.activatable {
    user-select: none;
    transition: $button_transition;

    // TODO validate if we want focusable rows
    @include focus-ring();

    &:hover {
      background-color: transparentizeVar($fg_color, 0.9);
    }
    &:active {
      box-shadow: inset 0 2px 2px -2px transparentizeVar(black, 0.8);
    }
    &.selected {
      text-shadow: $selected_text_shadow;
      &:active {
        box-shadow: inset 0 2px 3px -1px transparentizeVar(black, 0.5);
      }
      &:hover {
        @include colorMix(background-color, $fg_color, $selected_bg_color, 0.1);
      }
    }
  }

  &.selected {
    outline-color: $alt_focus_border_color;
    @extend %selected_items;
  }

  // TODO validate this
  // > .List__item.expander { padding: 0px; }
  // > .List__item.expander .row-header { padding: 2px; }
}

button.List__item {
  @include button("undecorated");
  border: none;
  width: 100%;
  text-align: left;
}

/*******************************************************
 * Rich Lists                                          *
 * Large list usually containing lots of widgets       *
 * https://gitlab.gnome.org/GNOME/gtk/-/issues/3073    *
 *******************************************************/

.List.rich {
  & > .List__item {
    padding: 8px 12px;
    min-height: 32px; /* should be tall even when only containing a .Label */
    align-items: center;

    & > .Label {
      flex: 1;
      line-height: 28px;
    }

    & > .Box {
      border-spacing: 12px;
      align-items: center;

      & > .Label:first-child {
        flex: 1;
        white-space: nowrap;
      }
    }

    .Button {
      @include button("undecorated");
      border: 1px solid lightenVar($borders_color, 10%);
      &.hover,
      &:hover {
        @include button("hover");
      }
      &.active,
      &:active {
        @include button("active");
      }
    }
  }
}

// Expandable list item's sublist
.List.sublist {
  width: 100%;
  background-color: $background_medium;
  border-bottom: 1px solid $borders_color;
  box-shadow: inset 0 1px rgba(black, 0.07);
}

.List__item.expandable {
  &.expanded:not(:hover) {
    background-color: rgba(black, 0.02);
  }

  .Icon.arrow {
    opacity: 0.3;
    transition: $button_transition;
    transform: rotate(0);
  }
  &.expanded .Icon.arrow {
    color: $selected_bg_color;
    --icon-color: #{$selected_bg_color};
    opacity: 1;
    transform: rotate(90deg);
  }
}

// XXX: implement other styles
// https://gitlab.gnome.org/GNOME/gtk/-/issues/2929#note_879049

/***********
 * Sidebar *
 ***********/
.stack-sidebar {
  // not a regular list
  @include colorMix(background-color, $background_low, $background_default, 0.5);

  &.separators:not(.horizontal) > .List__item:not(.separator):not(.increase-specificity) {
    border-bottom: none;
    &:not(:first-child) {
      border-top: 1px solid $borders_color;
    }
  }
  .List__item {
    padding: 10px 4px;

    > .Label {
      padding-left: 6px;
      padding-right: 6px;
    }

    &.needs-attention > .Label {
      @extend %needs_attention;
      background-size: 6px 6px, 0 0;
    }
    &.activatable:active,
    &.activatable.selected:active {
      box-shadow: none; // #3413
    }
  }
}

/**********************
 * Navigation Sidebar *
 **********************/

.navigation-sidebar:not(.increase-specificity) {
  $_navigation_border_color: lightenVar($borders_color, 10%);

  padding: $menu-margin 0; //only vertical padding. horizontal row size would clip
  @include colorMix(background-color, $background_low, $background_default, 0.5);
  border-color: $_navigation_border_color !important;

  > .separator {
    padding: 0;
    margin: 0;
    height: 2 * $menu-margin;
    border: none;
    border-bottom: 1px solid $_navigation_border_color !important;
  }

  > .List__item {
    padding: 5px;
  }
  &.medium > .List__item {
    min-height: 26px;
  }
  &.large > .List__item {
    min-height: 36px;
  }

  > .List__item.activatable {
    align-items: center;

    @extend .ModelButton;
    color: $fg_color;

    border-color: $_navigation_border_color !important;

    &.selected:not(.increase-specificity) {
      color: inherit;
      background-color: darkenVar($background_default, 10%);
      text-shadow: none;
    }
  }

  > .List__item.title {
    opacity: 0.9;
    font-weight: 700;
    padding: 8px 5px;
  }
}

/*********************
 * App Notifications *
 *********************/
.app-notification {
  @extend %osd;

  padding: 10px;
  border-spacing: 10px;
  border-radius: 0 0 5px 5px;
  background-color: $osd_bg_color;
  background-image: linear-gradient(to bottom, transparentizeVar(black, 0.8), transparent 2px);
  background-clip: padding-box;

  button {
    @extend %osd_button;
  }

  border {
    border: none;
  }
}

/*************************
 * Calendar & DatePicker *
 ************************/
.Calendar {
  display: inline-flex !important;
  color: $text_color;
  border: 1px solid $borders_color;
  width: 226px;

  > .Calendar__header {
    padding: 2px;
    // border-bottom: 1px solid $borders_color;

    > .Button {
      border: none;
      box-shadow: none;
      background: none;
      border-radius: $button_radius;
    }
    > .Button:backdrop {
      background: none;
    }

    > .Calendar__previous,
    > .Calendar__next {
      border-radius: $button_radius;
    }
    @at-root .Calendar.mode-month,
      .Calendar.mode-year {
      .Calendar__previous,
      .Calendar__next {
        opacity: 0;
      }
    }

    > .Calendar__monthLabel,
    > .Calendar__yearLabel {
      display: flex;
      align-items: center;
      // font-weight: 600;
      // color: $fg_color_title;
    }
    > .Calendar__monthLabel {
      flex: 3;
      justify-content: center;
    }
    > .Calendar__yearLabel {
      flex: 2;
      justify-content: flex-start;
    }
  }

  .Calendar__grid {
    border: none;
    height: 222px;
  }
  .Calendar__grid > * {
    width: 100%;
    height: 100%;
  }

  /* Day mode */
  .Calendar__weekDays {
    font-size: 9px;
    font-weight: 700;
    opacity: 0.4;
    > .Calendar__day {
      padding-top: 0.75rem;
      padding-bottom: 0.75rem;
    }
  }
  .Calendar__day:not(.increase-specificity) {
    // specificity to counter Button:hover
    width: 100%;
    text-align: center;

    &.day-0,
    &.day-6 {
      color: $muted_color;
    }

    &.other-month {
      color: rgba($muted_color, 0.5);
    }

    > .Button {
      display: inline-block;
      border: none;
      font-weight: inherit;
      font-size: 12px;
      width: 28px;
      height: 28px;
      min-width: 28px;
      min-height: 28px;
    }

    // > .Button.day-name {}

    // > .Button.week-number {}

    &.today > .Button {
      @extend %selected_items;
      font-weight: 600;
      box-shadow: none;
    }

    &.selected > .Button {
      box-shadow: inset 0px 1px $borders_color;
      background-color: darkenVar($bg_color, 20%);
    }

    &.today.selected > .Button {
      background-color: darkenVar($selected_bg_color, 10%);
    }

    // > .Button.day-number.other-month {
    //   color: gtkalpha(currentColor, 0.3);
    // }
  }

  /* Month mode */
  .Calendar__grid .Calendar__month {
    width: 33%;
  }
  .Calendar__grid .Calendar__month .Button {
    width: 100%;
    height: 100%;
    padding: 0;
    padding-top: 10px;
    padding-bottom: 10px;
    font-size: 12px;
  }
}

.YearPicker {
  .YearPicker__year .Button {
    width: 100%;
    padding: 0;
    padding-top: 0px;
    padding-bottom: 0px;
    height: unset;
    font-size: 12px;
  }
  .YearPicker__input {
    padding: 0 0.25rem;
    input[type="number"] {
      text-align: center;
    }
  }
}

.DatePicker__input {
  .Icon {
    opacity: 0.5;
  }
}
.DatePicker__popover {
  .Popover__container {
    padding: 0;
  }
  .Calendar {
    border: none;
  }
}

/***********
 * Dialogs *
 ***********/
.Window.dialog.message {
  // Message Dialog styling
  .titlebar {
    min-height: 20px;
    background-image: none;
    background-color: $bg_color;
    border-style: none;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
  }

  box.dialog-vbox.vertical {
    border-spacing: 10px;
  }

  & .Label.title {
    font-weight: 800;
    font-size: 15pt;
  }

  &.csd {
    // rounded bottom border styling for csd version
    &.background {
      // bigger radius for better antialiasing
      border-bottom-left-radius: $window_radius + 1;
      border-bottom-right-radius: $window_radius + 1;
    }

    .dialog-action-area button {
      padding: 10px 14px; // labels are not vertically centered on message dialog, this is a workaround
      border-radius: 0;
      border-left-style: solid;
      border-right-style: none;
      border-bottom-style: none;

      &:first-child {
        border-left-style: none;
        border-bottom-left-radius: 7px;
      }

      &:last-child {
        border-bottom-right-radius: 7px;
      }
    }
  }
}

.Window.assistant {
  .sidebar {
    padding: $menu-margin;
    border-top: 1px solid $borders_color;
  }

  &.csd .sidebar {
    border-top-style: none;
  }

  .sidebar > .Label {
    padding: 6px 12px;
  }

  .sidebar > .Label.highlight {
    background-color: $menu_selected_color;
    border-radius: $menu-margin;
  }
}

filechooser {
  .dialog-action-box {
    border-top: 1px solid $borders_color;
  }

  #pathbarbox {
    border-bottom: 1px solid $bg_color;
  }
}

filechooserbutton > button > box {
  border-spacing: 6px;
}
filechooserbutton.dnd-active {
  box-shadow: none;
  border-color: transparent;
}

/****************
 * File chooser *
 ****************/

.DropZone {
  color: $borders_color;
  border-color: $borders_color;
}

$_placesidebar_icons_opacity: 0.7;

row image.sidebar-icon {
  opacity: $_placesidebar_icons_opacity;
} // dim the sidebar icons
// see bug #786613 for details
// on this oddity

/* this should be more generic, only using .navigation-sidebar
   https://gitlab.gnome.org/GNOME/gtk/-/issues/2929
*/

placessidebar {
  .navigation-sidebar > row {
    // Needs overriding of the `.navigation-sidebar > row` padding
    padding: 0;

    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer {
      padding: 0 14px;
    }

    image.sidebar-icon {
      &:dir(ltr) {
        padding-right: 8px;
      }
      &:dir(rtl) {
        padding-left: 8px;
      }
    }

    .Label.sidebar-label {
      &:dir(ltr) {
        padding-right: 2px;
      }
      &:dir(rtl) {
        padding-left: 2px;
      }
    }

    @at-root button.sidebar-button {
      @extend %button_basic_flat;

      @extend %button_selected_flat;
      min-height: 26px;
      min-width: 26px;
      margin-top: 3px;
      margin-bottom: 3px;
      padding: 0;
      border-radius: 100%;
    }

    // in the sidebar case it makes no sense to click the selected row
    &.selected:active {
      box-shadow: none;
    }

    &.sidebar-placeholder-row {
      padding: 0 8px;
      min-height: 2px;
      background-image: image($drop_target_color);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row {
      color: $selected_bg_color;
    }

    &.dnd-active:not(:disabled) {
      color: $drop_target_color;
      box-shadow: inset 0 1px $drop_target_color, inset 0 -1px $drop_target_color;

      &.selected {
        color: $selected_fg_color;
        background-color: $drop_target_color;
      }
    }
  }
}

placesview {
  .server-list-button > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(-0.5turn);
  }

  row.activatable:hover {
  }

  > actionbar > revealer > box > box {
    border-spacing: 6px;
  }
}

/**************
 * GtkVideo *
 **************/

video {
  & image.osd {
    min-width: 64px;
    min-height: 64px;
    border-radius: 32px;
  }
  background: black;
}

/************
 * Tooltips *
 ************/
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    background-color: transparentizeVar(black, 0.2);
    background-clip: padding-box;
    border: 1px solid $tooltip_borders_color; // this subtle border is meant to
    // not make the tooltip melt with
    // very dark backgrounds
    color: white;
  }

  padding: 6px 10px;
  border-radius: $window_radius;
  box-shadow: none; // otherwise it gets inherited by windowframe.csd

  > box {
    border-spacing: 6px;
  }
}

/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  transition: $focus_transition;

  @include focus-ring($width: 4px, $offset: -2px);

  &.dnd-active,
  & {
    border-style: none;
  } // FIXME: implement a proper drop(active) state

  $_colorswatch_radius: 5px;

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-top-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-top-right-radius: $_colorswatch_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-bottom-left-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-bottom-left-radius: $_colorswatch_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-right-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.dark {
    > overlay {
      color: white;
    }

    &.activatable:hover > overlay {
      border-color: transparentizeVar(black, 0.2);
      .adwaita-dark-theme & {
        border-color: $borders_color;
      }
    }
  }

  &.light {
    > overlay {
      color: black;
    }

    &.activatable:hover > overlay {
      border-color: transparentizeVar(black, 0.5);
      .adwaita-dark-theme & {
        border-color: $borders_color;
      }
    }
  }

  &.dnd-active {
    box-shadow: none;

    &.light > overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px darkenVar($drop_target_color, 5%), inset 0 0 0 1px $drop_target_color;
      .adwaita-dark-theme & {
        box-shadow: inset 0 0 0 2px $borders_color, inset 0 0 0 1px $drop_target_color;
      }
    }

    &.dark > overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px transparentizeVar(black, 0.7), inset 0 0 0 1px $drop_target_color;
      .adwaita-dark-theme & {
        box-shadow: inset 0 0 0 2px $borders_color, inset 0 0 0 1px $drop_target_color;
      }
    }
  }

  > overlay {
    border: 1px solid transparentizeVar(black, 0.7);
    .adwaita-dark-theme & {
      border: 1px solid $borders_color;
    }
  }

  &.activatable:hover > overlay {
    box-shadow: inset 0 1px transparentizeVar(white, 0.6), inset 0 -1px transparentizeVar(black, 0.8);
  }

  &#add-color-button {
    border-radius: $_colorswatch_radius 0 0 $_colorswatch_radius;

    &:only-child {
      border-radius: $_colorswatch_radius;
    }

    > overlay {
      @include button(normal);
    }

    &.activatable:hover > overlay {
      @include button(hover);
    }
  }

  &:disabled {
    opacity: 0.5;

    > overlay {
      border-color: transparentizeVar(black, 0.4);
      box-shadow: none;
    }
  }

  row.selected & {
    box-shadow: 0 0 0 2px $selected_fg_color;
  }

  &#editor-color-sample {
    border-radius: 4px;

    > overlay {
      border-radius: 4.5px;
    }
  }
}

plane {
  transition: $focus_transition;

  @include focus-ring($offset: 2px, $outer: true);
}

// colorscale popup
colorchooser .Popover.osd {
  border-radius: 5px;
}

/********
 * Misc *
 ********/
.content-view {
  background-color: darkenVar($bg_color, 5%);

  &:hover {
    -gtk-icon-filter: brightness(1.2);
  }

  .tile {
    margin: 2px;
    background-color: transparent;
    border-radius: 0;
    padding: 0;

    .adwaita-dark-theme & {
      background-color: black;
    }

    &:active,
    &.selected {
      .adwaita-dark-theme & {
        background-color: $selected_bg_color;
      }
    }
    &:disabled {
      .adwaita-dark-theme & {
        background-color: $insensitive_bg_color;
      }
    }
  }

  > .SelectionArea {
    @extend .SelectionArea;
  }
}

.scale-popup {
  .osd & {
    @extend %osd;
  }

  .osd & button.flat {
    //FIXME: quick hack, redo properly
    border-style: none;
    border-radius: 5px;
  }

  button {
    // +/- buttons on GtkVolumeButton popup
    &:hover {
      @include button("undecorated");
      background-color: transparentizeVar($fg_color, 0.9);
      border-radius: 5px;
    }
  }
}

/**********************
 * .Window Decorations *
 *********************/
.Window {
  // lamefun trick to get rounded borders regardless of CSD use
  border-width: 0px;

  // this needs to be transparent
  // see bug #722563
  $_wm_border: transparentizeVar($borders_color, 0.1);
  $_wm_border_backdrop: transparentizeVar($borders_color, 0.1);

  &.csd {
    box-shadow: 0 3px 9px 1px transparentizeVar(black, 0.5), 0 0 0 1px $_wm_border; //doing borders with box-shadow
    margin: 0px;
    border-radius: $window_radius $window_radius 0 0;
    &:backdrop {
      // the transparent shadow here is to enforce that the shadow extents don't
      // change when we go to backdrop, to prevent jumping windows.
      // The biggest shadow should be in the same order then in the active state
      // or the jumping will happen during the transition.
      box-shadow: 0 3px 9px 1px transparent, 0 2px 6px 2px transparentizeVar(black, 0.8), 0 0 0 1px $_wm_border_backdrop;
      transition: $backdrop_transition;
    }

    &.popup {
      border-radius: $menu_radius;
      box-shadow: 0 1px 2px transparentizeVar(black, 0.8), 0 0 0 1px transparentizeVar($borders_color, 0.2);
    }

    &.dialog.message {
      border-radius: $window_radius;
      box-shadow: 0 1px 2px transparentizeVar(black, 0.8), 0 0 0 1px transparentizeVar($borders_color, 0.2);
    }

    &.solid-csd {
      margin: 0;
      padding: 0;
      border: solid 1px $borders_color;
      border-radius: 0;
      box-shadow: inset 0 0 0 3px $headerbar_bg_color, inset 0 1px $top_hilight;

      &:backdrop {
        box-shadow: inset 0 0 0 3px $backdrop_bg_color, inset 0 1px $top_hilight;
      }
    }
  }

  &.maximized,
  &.fullscreen,
  &.tiled,
  &.tiled-top,
  &.tiled-left,
  &.tiled-right,
  &.tiled-bottom {
    border-radius: 0;
  }

  &.popup {
    box-shadow: none;
  }

  // server-side decorations as used by mutter
  &.ssd {
    box-shadow: 0 0 0 1px $_wm_border;
  } //just doing borders, wm draws actual shadows
}

tooltip.csd {
  border-radius: 5px;
  box-shadow: none;
}

// catch all extend :)

%selected_items {
  background-color: $selected_bg_color;

  @at-root %nobg_selected_items,
    & {
    color: $selected_fg_color;

    @at-root %selected_items_disabled,
      &:disabled {
      @include colorMix(color, $selected_fg_color, $selected_bg_color, 0.5);
    }
  }
}

.monospace {
  font-family: monospace;
}

/**********************
 * Touch Copy & Paste *
 *********************/
//touch selection handlebars for the Popover.osd above
// cursor-handle {
//   background-color: transparent;
//   background-image: none;
//   box-shadow: none;
//   border-style: none;
//   min-width: 20px;
//   min-height: 24px;
//   padding-left: 20px;
//   padding-right: 20px;
//   padding-top: 24px;
//   padding-bottom: 24px;
//
//   @each $s,$as in ('',''),
//                   (':hover','-hover'),
//                   (':active','-active') { //no need for insensitive and backdrop
//     &.top#{$s}:dir(ltr), &.bottom#{$s}:dir(rtl) {
//       $_url: 'assets/text-select-start#{$as}#{$asset_suffix}';
//       -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
//                                     url('#{$_url}@2.png'));
//     }
//
//     &.bottom#{$s}:dir(ltr), &.top#{$s}:dir(rtl) {
//       $_url: 'assets/text-select-end#{$as}#{$asset_suffix}';
//       -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
//                                     url('#{$_url}@2.png'));
//     }
//
//     &.insertion-cursor#{$s}:dir(ltr), &.insertion-cursor#{$s}:dir(rtl) {
//       $_url: 'assets/slider-horz-scale-has-marks-above#{$as}#{$asset_suffix}';
//       -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
//                                     url('#{$_url}@2.png'));
//     }
//   }
// }

shortcuts-section {
  margin: 20px;
}

.shortcuts-search-results {
  margin: 20px;
  border-spacing: 24px;
}

// shortcut .Window keys
shortcut {
  border-spacing: 6px;
}

shortcut > .keycap {
  min-width: 20px;
  min-height: 25px;
  margin-top: 2px;
  padding-bottom: 3px;
  padding-left: 6px;
  padding-right: 6px;

  color: $fg_color;
  background-color: $base_color;
  border: 1px solid;
  border-color: $background_high;
  border-radius: 5px;
  box-shadow: $window_keycap_box_shadow_color;
  font-size: smaller;

  .adwaita-dark-theme & {
    border-color: $borders_color;
  }
}

:not(decoration):not(.Window).dnd-active:focus,
:not(decoration):not(.Window).dnd-active {
  // FIXME needs to be done widget by widget, this wildcard should really die
  border-color: $drop_target_color;
  box-shadow: inset 0 0 0 1px $drop_target_color;
  caret-color: $drop_target_color;
}

.StackSwitcher > button.text-button {
  min-width: 100px;
} // FIXME aggregate with buttons

.StackSwitcher.circular {
  border-spacing: 12px;

  // FIXME aggregate with buttons
  > button.circular,
  > button.text-button.circular {
    min-width: 32px;
    min-height: 32px;
    padding: 0;
  }
}
/*************
 * App Icons *
 *************/
/* Outline for low res icons */
.lowres-icon {
  --icon-shadow: 0 -1px rgba(0, 0, 0, 0.05), 1px 0 rgba(0, 0, 0, 0.1), 0 1px rgba(0, 0, 0, 0.3),
    -1px 0 rgba(0, 0, 0, 0.1);
}

/* Drapshadow for large icons */
.icon-dropshadow {
  --icon-shadow: 0 1px 12px rgba(0, 0, 0, 0.05), 0 -1px rgba(0, 0, 0, 0.05), 1px 0 rgba(0, 0, 0, 0.1),
    0 1px rgba(0, 0, 0, 0.3), -1px 0 rgba(0, 0, 0, 0.1);
}

/*********
 * Emoji *
 ********/

popover.emoji-picker > .Popover__container {
  padding: 0;
}

.emoji-searchbar {
  padding: 6px;
  border-spacing: 6px;
  border-bottom: 1px solid $borders_color;
}

.emoji-toolbar {
  padding: 6px;
  border-spacing: 6px;
  border-top: 1px solid $borders_color;
}

button.emoji-section {
  border-color: transparent;
  border-width: 3px;
  border-style: none none solid;
  border-radius: 0;

  padding: 3px 0 0;
  min-width: 32px;
  min-height: 28px;

  /* reset props inherited from the button style */
  background: none;
  box-shadow: none;
  text-shadow: none;

  &:hover {
    border-color: $borders_color;

    .adwaita-dark-theme & {
      border-color: transparentizeVar($fg_color, 0.9);
    }
  }
  &:checked {
    border-color: $selected_bg_color;
  }
}

popover.emoji-picker emoji {
  font-size: x-large;
  padding: 6px;
  border-radius: 6px;

  &:focus,
  &:hover {
    background: $selected_bg_color;
  }
}

emoji-completion-row > box {
  border-spacing: 10px;
  padding: 2px 10px;
}

emoji-completion-row:focus,
emoji-completion-row:hover {
  background-color: $selected_bg_color;
  color: $selected_fg_color;
}

emoji-completion-row emoji:focus,
emoji-completion-row emoji:hover {
  background-color: $menu_selected_color;
}

popover.entry-completion > .Popover__container {
  padding: 0;
}

statusbar {
  padding: 6px 10px 6px 10px;
}
