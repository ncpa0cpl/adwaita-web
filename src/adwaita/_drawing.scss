// Drawing mixins

// generic drawing of more complex things

//
// Helper mixin for drawing visible focus rings
//
// If $target is specified, the focus ring is applied to the specified child element.
// If $outer is true, the focus ring extends outward. Otherwise, it extends inward.
// If $within is true, use focus-within instead of focus:focus-visible
// $method: Method to use for the focus ring (outline, before, after)
//
@mixin focus-ring(
  $target: null,
  $width: 2px,
  $offset: -$width,
  $outer: false,
  $focus-state: ":focus:focus-visible",
  $fc: $focus_border_color,
  $method: "outline",
  $scale: 1.03
) {
  // Draw using the outline property
  // Note: outline doesn't respect the border-radius
  @if $method == "outline" {
    & #{$target} {
      outline: 0 solid transparent;
      outline-offset: if($outer, $offset + 4px, $offset + $width + 4px);
    }

    &#{$focus-state} #{$target} {
      outline-color: $fc;
      outline-width: $width;
      outline-offset: $offset;
    }
  }

  // Draw using a ::before or ::after element
  @if $method == "before" or $method == "after" {
    &#{$target} {
      position: relative;
      outline: none;
      overflow: visible;
    }

    &#{$target}::#{$method} {
      content: "";
      position: absolute;
      pointer-events: none;
      z-index: 2;
      display: inline-block;
      border: $width solid transparent;
      border-radius: inherit;
      transition: $focus_transition;
      top: $offset - 2px;
      left: $offset - 2px;
      width: calc(100% - #{if($offset != 0, 2 * $offset, "0px")});
      height: calc(100% - #{if($offset != 0, 2 * $offset, "0px")});
    }

    &#{$focus-state}#{$target} {
      outline: none;
    }
    &#{$focus-state}#{$target}::#{$method} {
      border: $width solid $fc;
      top: -2px;
      left: -2px;
      width: 100%;
      height: 100%;
    }
  }
}

@function _widget_edge($c: $borders_edge) {
  // outer highlight "used" on most widgets
  @if $c == none {
    @return none;
  } @else {
    @return 0 1px $c;
  }
}

@mixin _shadows($list...) {
  //
  // Helper mixin to stack up to box-shadows;
  //
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none {
      $shadows: $shadows, $shadow;
    }
  }

  box-shadow: $shadows;
}

// entries

@mixin entry($t, $fc: $focus_border_color, $edge: none) {
  //
  // Entries drawing function
  //
  // $t: entry type
  // $fc: focus color
  // $edge: set to none to not draw the bottom edge or specify a color to not
  //        use the default one
  //
  // possible $t values:
  // normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop, block_cursor;
  //

  $_blank_edge: if($edge == none, none, 0 1px transparent);
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $t==normal {
    color: $text_color;
    border-color: $borders_color;
    background-color: $base_color;
    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: $_entry_edge;
  }
  @if $t==backdrop {
    color: $backdrop_text_color;
    border-color: $backdrop_borders_color;
    background-color: $backdrop_base_color;
    box-shadow: $_blank_edge;
  }
  @if $t==backdrop-insensitive {
    color: $backdrop_insensitive_color;
    border-color: $backdrop_borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: $_blank_edge;
  }
  @if $t==osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentizeVar($osd_borders_color, 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: 0 1px black;
    --icon-shadow: 0 1px black;
  }
  @if $t==osd-focus {
    color: $osd_text_color;
    border-color: $selected_bg_color;
    background-color: transparentizeVar($osd_borders_color, 0.5);
    background-clip: padding-box;
    text-shadow: 0 1px black;
    --icon-shadow: 0 1px black;
  }
  @if $t==osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    --icon-shadow: none;
  }
  @if $t==osd-backdrop {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentizeVar($osd_borders_color, 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    --icon-shadow: none;
  }
  @if $t==block_cursor {
    color: $base_color;
    background-color: $text_color;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true {
    @return darkenVar($c, 20%);
  } @else {
    @return darkenVar($c, 10%);
  }
}

@function _button_hilight_color($c) {
  //
  // calculate the right top highlight color for buttons
  //
  // $c: base color;
  //
  @return transparent;
}

@mixin button($t, $c: $bg_color, $tc: $fg_color, $edge: none) {
  //
  // Button drawing function
  //
  // $t:    button type,
  // $c:    base button color for colored* types
  // $tc:   optional text color for colored* types
  // $edge: set to none to not draw the bottom edge or specify a color to not
  //        use the default one
  //
  // possible $t values:
  // normal, hover, active, insensitive, insensitive-active,
  // backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
  // osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
  //
  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparent));
  $_button_shadow: 0 1px 2px transparentizeVar($shadow_color, 0.1);

  @if $t==normal {
    //
    // normal button
    //
    color: $tc;
    outline-color: if($c != $bg_color, $alt_focus_border_color, $focus_border_color);
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    border-bottom-color: if($c != $bg_color, _border_color($c, true), $alt_borders_color);
    background-color: $c;

    @include _shadows(inset 0 1px $_hilight_color, $_button_edge, $_button_shadow);
    &::before {
      content: " ";
      position: absolute;
      pointer-events: none;
      width: 100%;
      height: 100%;
      top: 0px;
      left: 0px;
      background: linear-gradient(to top, rgba(black, 0.03), transparent);
      transition: all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
  } @else if $t==hover {
    //
    // hovered button
    //
    color: $tc;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    border-bottom-color: if($c != $bg_color, _border_color($c, true), $alt_borders_color);
    background-color: $c;
    @include _shadows(inset 0 1px darkenVar($c, 5%), $_button_edge, $_button_shadow);
    .adwaita-dark-theme & {
      @include _shadows(inset 0 1px $c, $_button_edge, $_button_shadow);
    }
    &::before {
      opacity: 0;
    }
  }

  @if $t==normal-alt {
    //
    // normal button alternative look
    //
    color: $tc;
    outline-color: if($c != $bg_color, $alt_focus_border_color, $focus_border_color);
    border-color: if($c != $bg_color, _border_color($c, true), $alt_borders_color); //colored buttons
    background-image: linear-gradient(to bottom, lightenVar($c, 5%) 20%, $c 90%);
    @include _shadows(inset 0 1px _button_hilight_color(lightenVar($c, 5%)), $_button_edge, $_button_shadow);
    .adwaita-dark-theme & {
      background-image: linear-gradient(to bottom, darkenVar($c, 5%) 20%, darkenVar($c, 10%) 90%);
      @include _shadows(inset 0 1px $_hilight_color, $_button_edge, $_button_shadow);
    }
  } @else if $t==active {
    //
    // pushed button
    //
    color: $tc;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-color: darkenVar($c, 15%);
    .adwaita-dark-theme & {
      background-color: darkenVar($c, 5%);
    }
    @include _shadows(inset 0 1px transparentizeVar($_hilight_color, 1), $_button_edge);
    &::before {
      opacity: 0;
    }

    text-shadow: none;
    --icon-shadow: none;
  } @else if $t==insensitive {
    //
    // insensitive button
    //
    @if $tc != $fg_color {
      --icon-color: $tc;
      @if $c != $bg_color {
        @include colorMix(color, $tc, $c, 0.5);
      } @else {
        @include colorMix(color, $tc, $insensitive_bg_color, 0.5);
      }
    } @else {
      color: $insensitive_fg_color;
      --icon-color: $insensitive_fg_color;
    }

    @if $c != $bg_color {
      @include colorMix(background-color, $c, $base_color, 0.8);
    }

    border-color: if($c != $bg_color, _border_color($c), $insensitive_borders_color);
    text-shadow: none;
    --icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentizeVar(white, 1), $_button_edge);
    &::before {
      opacity: 0;
    }
  } @else if $t==insensitive-active {
    //
    // insensitive pushed button
    //
    $_bc: if($c != $bg_color, _border_color($c), $insensitive_borders_color);

    @include colorMix(background-color, darkenVar($c, 10%), darkenVar($base_color, 10%), 0.85);

    @if $c != $bg_color {
      @include colorMix(color, $tc, darkenVar($c, 10%), 0.8);
    } @else {
      color: $insensitive_fg_color;
    }

    border-color: $_bc;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentizeVar(white, 1), $_button_edge);
    &::before {
      opacity: 0;
    }

    .adwaita-dark-theme & {
      @include colorMix(background-color, darkenVar($c, 5%), darkenVar($base_color, 5%), 0.85);

      @if $c != $bg_color {
        @include colorMix(color, $tc, darkenVar($c, 5%), 0.6);
      } @else {
        color: $insensitive_fg_color;
      }

      border-color: $_bc;
    }
  } @else if $t==backdrop {
    //
    // backdrop button
    //
    $_bg: if($c != $bg_color, $c, $backdrop_bg_color);

    @if $tc != $fg_color {
      @include colorMix(color, $tc, $_bg, 0.8);
    } @else {
      color: $backdrop_fg_color;
    }

    border-color: if($c != $bg_color, $c, $backdrop_borders_color);
    background-color: $_bg;
    text-shadow: none;
    --icon-shadow: none;
    @include _shadows(inset 0 1px transparentizeVar(white, 1), $_blank_edge);
    &::before {
      opacity: 0;
    }

    .adwaita-dark-theme & {
      border-color: if($c != $bg_color, _border_color($c), $backdrop_borders_color);
    }
  } @else if $t==backdrop-active {
    //
    // backdrop pushed button
    //
    @include colorMix(background-color, darkenVar($c, 10%), darkenVar($base_color, 10%), 0.85);

    @if $tc != $fg_color {
      @include colorMix(color, darkenVar($tc, 10%), darkenVar($c, 10%), 0.8);
    } @else {
      color: $backdrop_fg_color;
    }

    @if $c != $bg_color {
      @include colorMix(border-color, darkenVar($c, 10%), darkenVar($base_color, 10%), 0.85);
    } @else {
      border-color: $backdrop_borders_color;
    }

    @include _shadows(inset 0 1px transparentizeVar(white, 1), $_blank_edge);
    &::before {
      opacity: 0;
    }
    .adwaita-dark-theme & {
      @include colorMix(background-color, darkenVar($c, 5%), darkenVar($base_color, 5%), 0.85);

      @if $tc != $fg_color {
        @include colorMix(color, darkenVar($tc, 5%), darkenVar($c, 5%), 0.8);
      } @else {
        color: $backdrop_fg_color;
      }

      @if $c != $bg_color {
        @include colorMix(border-color, darkenVar($c, 5%), darkenVar($base_color, 5%), 0.85);
      } @else {
        border-color: $backdrop_borders_color;
      }
    }
  } @else if $t==backdrop-insensitive {
    //
    // backdrop insensitive button
    //

    @if $c != $bg_color {
      @include colorMix(color, $tc, $c, 0.35);
      @include colorMix(border-color, $c, $base_color, 0.85);
      @include colorMix(background-color, $c, $base_color, 0.85);
    } @else {
      color: $backdrop_insensitive_color;
      border-color: $backdrop_borders_color;
      background-color: $insensitive_bg_color;
    }

    text-shadow: none;
    --icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentizeVar(white, 1), $_blank_edge);
    &::before {
      opacity: 0;
    }

    .adwaita-dark-theme & {
      $_bc: _border_color($c);

      border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    }
  } @else if $t==backdrop-insensitive-active {
    //
    // backdrop insensitive pushed button
    //

    @if $c != $bg_color {
      @include colorMix(color, darkenVar($tc, 10%), darkenVar($c, 10%), 0.35);
      @include colorMix(border-color, darkenVar($c, 10%), darkenVar($base_color, 10%), 0.85);
    } @else {
      color: $backdrop_insensitive_color;
      border-color: $backdrop_borders_color;
    }

    @include colorMix(background-color, darkenVar($c, 10%), darkenVar($base_color, 10%), 0.85);

    @include _shadows(inset 0 1px transparentizeVar(white, 1), $_blank_edge);
    &::before {
      opacity: 0;
    }

    .adwaita-dark-theme & {
      @if $c != $bg_color {
        @include colorMix(color, darkenVar($tc, 5%), darkenVar($c, 5%), 0.35);
        @include colorMix(border-color, darkenVar($c, 5%), darkenVar($base_color, 5%), 0.85);
      } @else {
        color: $backdrop_insensitive_color;
        border-color: $backdrop_borders_color;
      }

      @include colorMix(background-color, darkenVar($c, 5%), darkenVar($base_color, 5%), 0.85);
    }
  } @else if $t==osd {
    //
    // normal osd button
    //
    $_bg: if($c != $bg_color, transparentizeVar($c, 0.5), $osd_bg_color);

    color: $osd_fg_color;
    outline-color: if($c != $bg_color, $alt_focus_border_color, $focus_border_color);
    border-color: $osd_borders_color;
    background-color: $_bg;
    background-clip: padding-box;
    box-shadow: inset 0 1px transparentizeVar(white, 0.9);
    &::before {
      opacity: 0;
    }
    text-shadow: none;
    --icon-shadow: none;
  } @else if $t==osd-hover {
    //
    // active osd button
    //
    $_bg: if($c != $bg_color, transparentizeVar($c, 0.3), darkenVar($osd_bg_color, 10%));

    color: white;
    border-color: $osd_borders_color;
    background-color: $_bg;
    background-clip: padding-box;
    box-shadow: inset 0 1px transparentizeVar(white, 0.9);
    &::before {
      opacity: 0;
    }
    text-shadow: none;
    --icon-shadow: none;
  } @else if $t==osd-active {
    //
    // active osd button
    //
    $_bg: if($c != $bg_color, $c, darkenVar($osd_bg_color, 20%));

    color: white;
    border-color: $osd_borders_color;
    background-color: $_bg;
    background-clip: padding-box;
    box-shadow: none;
    &::before {
      opacity: 0;
    }
    text-shadow: none;
    --icon-shadow: none;
  } @else if $t==osd-insensitive {
    //
    // insensitive osd button
    //
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    &::before {
      opacity: 0;
    }
    text-shadow: none;
    --icon-shadow: none;
  } @else if $t==osd-backdrop {
    //
    // backdrop osd button
    //
    $_bg: if($c != $bg_color, transparentizeVar($c, 0.5), $osd_bg_color);

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: $_bg;
    background-clip: padding-box;
    box-shadow: none;
    &::before {
      opacity: 0;
    }
    text-shadow: none;
    --icon-shadow: none;
  } @else if $t==undecorated {
    //
    // reset
    //
    color: inherit;
    border-color: transparent;
    background-color: transparent;

    @include _shadows(inset 0 1px transparentizeVar(white, 1), $_blank_edge);
    &::before {
      opacity: 0;
    }

    text-shadow: none;
    --icon-shadow: none;
  } @else if $t==undecorated-hover {
    border-color: transparent;
    box-shadow: none;
    &::before {
      opacity: 0;
    }
    text-shadow: none;
    background-color: darkenVar($c, 5%);
  } @else if $t==undecorated-active {
    border-color: transparent;
    box-shadow: none;
    &::before {
      opacity: 0;
    }
    text-shadow: none;
    background-color: darkenVar($c, 10%);
    .adwaita-dark-theme & {
      background-color: darkenVar($c, 10%);
    }
  }
}

@mixin headerbar_fill($c: $headerbar_bg_color, $hc: $top_hilight, $ov: none) {
  //
  // headerbar fill
  //
  // $c:  base color
  // $hc: top highlight color
  // $ov: a background layer for background shorthand (hence no commas!)
  //
  $gradient: linear-gradient(to top, darkenVar($c, 10%), lightenVar($c, 5%));

  .adwaita-dark-theme {
    $gradient: linear-gradient(to top, darkenVar($c, 5%), lightenVar($c, 5%));
  }

  @if $ov != none {
    background: $c $ov, $gradient;
  } @else {
    background: $c $gradient;
  }

  box-shadow: inset 0 1px $hc, inset 0 -2px 2px rgba(black, 0.02); // top highlight
}

@mixin overshoot($p, $t: normal, $c: $fg_color) {
  //
  // overshoot
  //
  // $p: position
  // $t: type
  // $c: base color
  //
  // possible $p values:
  // top, bottom, right, left
  //
  // possible $t values:
  // normal, backdrop
  //

  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==right or $p==left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: transparentizeVar($c, 0.9);

  @if $c==$fg_color {
    $_small_gradient_color: darkenVar($borders_color, 10%);
    $_big_gradient_color: transparentizeVar($fg_color, 0.9);

    @if $t==backdrop {
      $_small_gradient_color: $backdrop_borders_color;
    }
  }

  $_small_gradient: radial-gradient(
    farthest-side at $p,
    $_small_gradient_color 85%,
    transparentizeVar($_small_gradient_color, 1)
  );

  $_big_gradient: radial-gradient(
    farthest-side at $p,
    $_big_gradient_color,
    transparentizeVar($_big_gradient_color, 1)
  );

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  } @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $p;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none; //
  box-shadow: none; //
}

/***************************
 * Check and Radio buttons *
 ***************************/

@mixin check($t, $c: $checkradio_bg_color, $tc: $checkradio_fg_color, $checked: false) {
  // Check/Radio drawing function
  //
  // $t:        check/radio type,
  // $c:        base button color for colored* types
  // $tc:       optional text color for colored* types
  // $checked:  bool to chose between checked/unchecked
  //
  // possible $t values:
  // normal, hover, active, insensitive, backdrop, backdrop-insensitive, menu

  $_border_color: if($c==$checkradio_bg_color, $checkradio_borders_color, $alt_borders_color);

  @if $t==normal {
    background-clip: if($checked, border-box, padding-box);
    background-image: linear-gradient(to bottom, lightenVar($c, 5%) 20%, $c 90%);
    border-color: $_border_color;
    box-shadow: 0 1px transparentizeVar(black, 0.95);
    color: $tc;
  }

  @if $t==hover {
    background-image: if(
      $c == white,
      image(darkenVar($c, 5%)),
      linear-gradient(to bottom, lightenVar($c, 9%) 10%, lightenVar($c, 4%) 90%)
    );
  }

  @if $t==active {
    box-shadow: inset 0 1px rgba(0, 0, 0, 0.2);
    .adwaita-dark-theme & {
      box-shadow: inset 0 1px black;
    }
    background-image: if($c == white, image(darkenVar($c, 15%)), image(darkenVar($c, 5%)));
  }

  @if $t==insensitive {
    box-shadow: none;
    color: transparentizeVar($tc, 0.3);
  }

  @if $t==backdrop {
    background-image: image($c);
    box-shadow: none;
    color: $tc;
  }

  @if $t==backdrop-insensitive {
    box-shadow: none;
    color: transparentizeVar($tc, 0.3);
  }

  @if $t==menu {
    transform: scale(0.8);
    border-width: 1.2px;
    border-color: transparent;
    box-shadow: none;
    background-image: image(transparent);
    color: $tc;
  }

  @if $t==menu-active {
    transform: scale(0.8);
    border-width: 1.2px;
    color: $tc;
    box-shadow: none;
    background-image: image(transparent);
  }
}
